/*
 * API Settings
 * At BlueSnap, we look at payments a little differently. Our Payment Orchestration Platform helps businesses accept payments globally and is designed to increase revenue and reduces costs. We provide a comprehensive back-end solutions that simplifies the complexity of payments, managing the full process from start to finish.  BlueSnap supports payments through multiple sales channels such as online and mobile sales, marketplaces, subscriptions, invoice payments and manual orders through a virtual terminal. And for businesses looking for embedded payments, we offer white-labeled payments for platforms with automated underwriting and onboarding that supports marketplaces and split payments.  And with one integration and contract, businesses can sell in over 200 geographies with access to local acquiring in 47 countries, 110+ currencies and 100+ global payment types, including popular eWallets, automated accounts receivable, world-class fraud protection and chargeback management, built-in solutions for regulation and tax compliance, and unified global reporting to help businesses grow.  With a US headquarters in Waltham, MA, and EU headquarters in Dublin, Ireland, BlueSnap is backed by world-class private equity investors including Great Hill Partners and Parthenon Capital Partners.   Learn more at BlueSnap.com
 *
 * The version of the OpenAPI document: 8976-Tools
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.ReversalAuthTransactionRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class ReversalApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ReversalApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public ReversalApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        if (apiClient.getSec1() == null) {
            throw new IllegalArgumentException("\"Authorization\" is required but no API key was provided. Please set \"Authorization\" with ApiClient#setSec1(String).");
        }
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call authTransactionCall(ReversalAuthTransactionRequest reversalAuthTransactionRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = reversalAuthTransactionRequest;

        // create path and map variables
        String localVarPath = "/transactions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0", "sec1" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call authTransactionValidateBeforeCall(ReversalAuthTransactionRequest reversalAuthTransactionRequest, final ApiCallback _callback) throws ApiException {
        return authTransactionCall(reversalAuthTransactionRequest, _callback);

    }


    private ApiResponse<Void> authTransactionWithHttpInfo(ReversalAuthTransactionRequest reversalAuthTransactionRequest) throws ApiException {
        okhttp3.Call localVarCall = authTransactionValidateBeforeCall(reversalAuthTransactionRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call authTransactionAsync(ReversalAuthTransactionRequest reversalAuthTransactionRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = authTransactionValidateBeforeCall(reversalAuthTransactionRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class AuthTransactionRequestBuilder {
        private String cardTransactionType;
        private Integer transactionId;

        private AuthTransactionRequestBuilder() {
        }

        /**
         * Set cardTransactionType
         * @param cardTransactionType  (optional, default to AUTH_REVERSAL)
         * @return AuthTransactionRequestBuilder
         */
        public AuthTransactionRequestBuilder cardTransactionType(String cardTransactionType) {
            this.cardTransactionType = cardTransactionType;
            return this;
        }
        
        /**
         * Set transactionId
         * @param transactionId  (optional, default to 1011671987)
         * @return AuthTransactionRequestBuilder
         */
        public AuthTransactionRequestBuilder transactionId(Integer transactionId) {
            this.transactionId = transactionId;
            return this;
        }
        
        /**
         * Build call for authTransaction
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ReversalAuthTransactionRequest reversalAuthTransactionRequest = buildBodyParams();
            return authTransactionCall(reversalAuthTransactionRequest, _callback);
        }

        private ReversalAuthTransactionRequest buildBodyParams() {
            ReversalAuthTransactionRequest reversalAuthTransactionRequest = new ReversalAuthTransactionRequest();
            reversalAuthTransactionRequest.cardTransactionType(this.cardTransactionType);
            reversalAuthTransactionRequest.transactionId(this.transactionId);
            return reversalAuthTransactionRequest;
        }

        /**
         * Execute authTransaction request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            ReversalAuthTransactionRequest reversalAuthTransactionRequest = buildBodyParams();
            authTransactionWithHttpInfo(reversalAuthTransactionRequest);
        }

        /**
         * Execute authTransaction request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            ReversalAuthTransactionRequest reversalAuthTransactionRequest = buildBodyParams();
            return authTransactionWithHttpInfo(reversalAuthTransactionRequest);
        }

        /**
         * Execute authTransaction request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            ReversalAuthTransactionRequest reversalAuthTransactionRequest = buildBodyParams();
            return authTransactionAsync(reversalAuthTransactionRequest, _callback);
        }
    }

    /**
     * Auth Reversal
     * 
     * @return AuthTransactionRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public AuthTransactionRequestBuilder authTransaction() throws IllegalArgumentException {
        return new AuthTransactionRequestBuilder();
    }
}
