/*
 * API Settings
 * At BlueSnap, we look at payments a little differently. Our Payment Orchestration Platform helps businesses accept payments globally and is designed to increase revenue and reduces costs. We provide a comprehensive back-end solutions that simplifies the complexity of payments, managing the full process from start to finish.  BlueSnap supports payments through multiple sales channels such as online and mobile sales, marketplaces, subscriptions, invoice payments and manual orders through a virtual terminal. And for businesses looking for embedded payments, we offer white-labeled payments for platforms with automated underwriting and onboarding that supports marketplaces and split payments.  And with one integration and contract, businesses can sell in over 200 geographies with access to local acquiring in 47 countries, 110+ currencies and 100+ global payment types, including popular eWallets, automated accounts receivable, world-class fraud protection and chargeback management, built-in solutions for regulation and tax compliance, and unified global reporting to help businesses grow.  With a US headquarters in Waltham, MA, and EU headquarters in Dublin, Ireland, BlueSnap is backed by world-class private equity investors including Great Hill Partners and Parthenon Capital Partners.   Learn more at BlueSnap.com
 *
 * The version of the OpenAPI document: 8976-Tools
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.SubscriptionCreateMerchantManagedChargeRequest;
import com.konfigthis.client.model.SubscriptionCreateMerchantManagedSubscriptionRequest;
import com.konfigthis.client.model.SubscriptionCreateMerchantManagedSubscriptionRequestPayerInfo;
import com.konfigthis.client.model.SubscriptionCreateMerchantManagedSubscriptionRequestPaymentSource;
import com.konfigthis.client.model.SubscriptionCreateNewRequest;
import com.konfigthis.client.model.SubscriptionCreateNewRequestPayerInfo;
import com.konfigthis.client.model.SubscriptionCreateNewRequestPaymentSource;
import com.konfigthis.client.model.SubscriptionUpdateSubscriptionRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class SubscriptionApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public SubscriptionApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public SubscriptionApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        if (apiClient.getSec1() == null) {
            throw new IllegalArgumentException("\"Authorization\" is required but no API key was provided. Please set \"Authorization\" with ApiClient#setSec1(String).");
        }
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createMerchantManagedChargeCall(Integer subscriptionId, SubscriptionCreateMerchantManagedChargeRequest subscriptionCreateMerchantManagedChargeRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = subscriptionCreateMerchantManagedChargeRequest;

        // create path and map variables
        String localVarPath = "/recurring/ondemand/{subscriptionId}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0", "sec1" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createMerchantManagedChargeValidateBeforeCall(Integer subscriptionId, SubscriptionCreateMerchantManagedChargeRequest subscriptionCreateMerchantManagedChargeRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling createMerchantManagedCharge(Async)");
        }

        return createMerchantManagedChargeCall(subscriptionId, subscriptionCreateMerchantManagedChargeRequest, _callback);

    }


    private ApiResponse<Void> createMerchantManagedChargeWithHttpInfo(Integer subscriptionId, SubscriptionCreateMerchantManagedChargeRequest subscriptionCreateMerchantManagedChargeRequest) throws ApiException {
        okhttp3.Call localVarCall = createMerchantManagedChargeValidateBeforeCall(subscriptionId, subscriptionCreateMerchantManagedChargeRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call createMerchantManagedChargeAsync(Integer subscriptionId, SubscriptionCreateMerchantManagedChargeRequest subscriptionCreateMerchantManagedChargeRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = createMerchantManagedChargeValidateBeforeCall(subscriptionId, subscriptionCreateMerchantManagedChargeRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class CreateMerchantManagedChargeRequestBuilder {
        private final Integer subscriptionId;
        private Float amount;
        private String currency;
        private String merchantTransactionId;
        private String taxReference;

        private CreateMerchantManagedChargeRequestBuilder(Integer subscriptionId) {
            this.subscriptionId = subscriptionId;
        }

        /**
         * Set amount
         * @param amount  (optional, default to 45)
         * @return CreateMerchantManagedChargeRequestBuilder
         */
        public CreateMerchantManagedChargeRequestBuilder amount(Float amount) {
            this.amount = amount;
            return this;
        }
        
        /**
         * Set currency
         * @param currency  (optional, default to USD)
         * @return CreateMerchantManagedChargeRequestBuilder
         */
        public CreateMerchantManagedChargeRequestBuilder currency(String currency) {
            this.currency = currency;
            return this;
        }
        
        /**
         * Set merchantTransactionId
         * @param merchantTransactionId  (optional, default to MyUniqueOnDemandSubscription)
         * @return CreateMerchantManagedChargeRequestBuilder
         */
        public CreateMerchantManagedChargeRequestBuilder merchantTransactionId(String merchantTransactionId) {
            this.merchantTransactionId = merchantTransactionId;
            return this;
        }
        
        /**
         * Set taxReference
         * @param taxReference  (optional, default to 048deff0-a285-47e1-bc39-42f79bf0095b)
         * @return CreateMerchantManagedChargeRequestBuilder
         */
        public CreateMerchantManagedChargeRequestBuilder taxReference(String taxReference) {
            this.taxReference = taxReference;
            return this;
        }
        
        /**
         * Build call for createMerchantManagedCharge
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            SubscriptionCreateMerchantManagedChargeRequest subscriptionCreateMerchantManagedChargeRequest = buildBodyParams();
            return createMerchantManagedChargeCall(subscriptionId, subscriptionCreateMerchantManagedChargeRequest, _callback);
        }

        private SubscriptionCreateMerchantManagedChargeRequest buildBodyParams() {
            SubscriptionCreateMerchantManagedChargeRequest subscriptionCreateMerchantManagedChargeRequest = new SubscriptionCreateMerchantManagedChargeRequest();
            subscriptionCreateMerchantManagedChargeRequest.amount(this.amount);
            subscriptionCreateMerchantManagedChargeRequest.currency(this.currency);
            subscriptionCreateMerchantManagedChargeRequest.merchantTransactionId(this.merchantTransactionId);
            subscriptionCreateMerchantManagedChargeRequest.taxReference(this.taxReference);
            return subscriptionCreateMerchantManagedChargeRequest;
        }

        /**
         * Execute createMerchantManagedCharge request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            SubscriptionCreateMerchantManagedChargeRequest subscriptionCreateMerchantManagedChargeRequest = buildBodyParams();
            createMerchantManagedChargeWithHttpInfo(subscriptionId, subscriptionCreateMerchantManagedChargeRequest);
        }

        /**
         * Execute createMerchantManagedCharge request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            SubscriptionCreateMerchantManagedChargeRequest subscriptionCreateMerchantManagedChargeRequest = buildBodyParams();
            return createMerchantManagedChargeWithHttpInfo(subscriptionId, subscriptionCreateMerchantManagedChargeRequest);
        }

        /**
         * Execute createMerchantManagedCharge request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            SubscriptionCreateMerchantManagedChargeRequest subscriptionCreateMerchantManagedChargeRequest = buildBodyParams();
            return createMerchantManagedChargeAsync(subscriptionId, subscriptionCreateMerchantManagedChargeRequest, _callback);
        }
    }

    /**
     * Create Merchant-Managed Subscription Charge
     * 
     * @param subscriptionId BlueSnap identifier for the subscription. (required)
     * @return CreateMerchantManagedChargeRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public CreateMerchantManagedChargeRequestBuilder createMerchantManagedCharge(Integer subscriptionId) throws IllegalArgumentException {
        if (subscriptionId == null) throw new IllegalArgumentException("\"subscriptionId\" is required but got null");
        return new CreateMerchantManagedChargeRequestBuilder(subscriptionId);
    }
    private okhttp3.Call createMerchantManagedSubscriptionCall(SubscriptionCreateMerchantManagedSubscriptionRequest subscriptionCreateMerchantManagedSubscriptionRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = subscriptionCreateMerchantManagedSubscriptionRequest;

        // create path and map variables
        String localVarPath = "/recurring/ondemand";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0", "sec1" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createMerchantManagedSubscriptionValidateBeforeCall(SubscriptionCreateMerchantManagedSubscriptionRequest subscriptionCreateMerchantManagedSubscriptionRequest, final ApiCallback _callback) throws ApiException {
        return createMerchantManagedSubscriptionCall(subscriptionCreateMerchantManagedSubscriptionRequest, _callback);

    }


    private ApiResponse<Void> createMerchantManagedSubscriptionWithHttpInfo(SubscriptionCreateMerchantManagedSubscriptionRequest subscriptionCreateMerchantManagedSubscriptionRequest) throws ApiException {
        okhttp3.Call localVarCall = createMerchantManagedSubscriptionValidateBeforeCall(subscriptionCreateMerchantManagedSubscriptionRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call createMerchantManagedSubscriptionAsync(SubscriptionCreateMerchantManagedSubscriptionRequest subscriptionCreateMerchantManagedSubscriptionRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = createMerchantManagedSubscriptionValidateBeforeCall(subscriptionCreateMerchantManagedSubscriptionRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class CreateMerchantManagedSubscriptionRequestBuilder {
        private Float amount;
        private String currency;
        private SubscriptionCreateMerchantManagedSubscriptionRequestPayerInfo payerInfo;
        private SubscriptionCreateMerchantManagedSubscriptionRequestPaymentSource paymentSource;

        private CreateMerchantManagedSubscriptionRequestBuilder() {
        }

        /**
         * Set amount
         * @param amount  (optional, default to 45)
         * @return CreateMerchantManagedSubscriptionRequestBuilder
         */
        public CreateMerchantManagedSubscriptionRequestBuilder amount(Float amount) {
            this.amount = amount;
            return this;
        }
        
        /**
         * Set currency
         * @param currency  (optional, default to USD)
         * @return CreateMerchantManagedSubscriptionRequestBuilder
         */
        public CreateMerchantManagedSubscriptionRequestBuilder currency(String currency) {
            this.currency = currency;
            return this;
        }
        
        /**
         * Set payerInfo
         * @param payerInfo  (optional)
         * @return CreateMerchantManagedSubscriptionRequestBuilder
         */
        public CreateMerchantManagedSubscriptionRequestBuilder payerInfo(SubscriptionCreateMerchantManagedSubscriptionRequestPayerInfo payerInfo) {
            this.payerInfo = payerInfo;
            return this;
        }
        
        /**
         * Set paymentSource
         * @param paymentSource  (optional)
         * @return CreateMerchantManagedSubscriptionRequestBuilder
         */
        public CreateMerchantManagedSubscriptionRequestBuilder paymentSource(SubscriptionCreateMerchantManagedSubscriptionRequestPaymentSource paymentSource) {
            this.paymentSource = paymentSource;
            return this;
        }
        
        /**
         * Build call for createMerchantManagedSubscription
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            SubscriptionCreateMerchantManagedSubscriptionRequest subscriptionCreateMerchantManagedSubscriptionRequest = buildBodyParams();
            return createMerchantManagedSubscriptionCall(subscriptionCreateMerchantManagedSubscriptionRequest, _callback);
        }

        private SubscriptionCreateMerchantManagedSubscriptionRequest buildBodyParams() {
            SubscriptionCreateMerchantManagedSubscriptionRequest subscriptionCreateMerchantManagedSubscriptionRequest = new SubscriptionCreateMerchantManagedSubscriptionRequest();
            subscriptionCreateMerchantManagedSubscriptionRequest.amount(this.amount);
            subscriptionCreateMerchantManagedSubscriptionRequest.currency(this.currency);
            subscriptionCreateMerchantManagedSubscriptionRequest.payerInfo(this.payerInfo);
            subscriptionCreateMerchantManagedSubscriptionRequest.paymentSource(this.paymentSource);
            return subscriptionCreateMerchantManagedSubscriptionRequest;
        }

        /**
         * Execute createMerchantManagedSubscription request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            SubscriptionCreateMerchantManagedSubscriptionRequest subscriptionCreateMerchantManagedSubscriptionRequest = buildBodyParams();
            createMerchantManagedSubscriptionWithHttpInfo(subscriptionCreateMerchantManagedSubscriptionRequest);
        }

        /**
         * Execute createMerchantManagedSubscription request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            SubscriptionCreateMerchantManagedSubscriptionRequest subscriptionCreateMerchantManagedSubscriptionRequest = buildBodyParams();
            return createMerchantManagedSubscriptionWithHttpInfo(subscriptionCreateMerchantManagedSubscriptionRequest);
        }

        /**
         * Execute createMerchantManagedSubscription request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            SubscriptionCreateMerchantManagedSubscriptionRequest subscriptionCreateMerchantManagedSubscriptionRequest = buildBodyParams();
            return createMerchantManagedSubscriptionAsync(subscriptionCreateMerchantManagedSubscriptionRequest, _callback);
        }
    }

    /**
     * Create Merchant-Managed Subscription
     * 
     * @return CreateMerchantManagedSubscriptionRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public CreateMerchantManagedSubscriptionRequestBuilder createMerchantManagedSubscription() throws IllegalArgumentException {
        return new CreateMerchantManagedSubscriptionRequestBuilder();
    }
    private okhttp3.Call createNewCall(SubscriptionCreateNewRequest subscriptionCreateNewRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = subscriptionCreateNewRequest;

        // create path and map variables
        String localVarPath = "/recurring/subscriptions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0", "sec1" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNewValidateBeforeCall(SubscriptionCreateNewRequest subscriptionCreateNewRequest, final ApiCallback _callback) throws ApiException {
        return createNewCall(subscriptionCreateNewRequest, _callback);

    }


    private ApiResponse<Void> createNewWithHttpInfo(SubscriptionCreateNewRequest subscriptionCreateNewRequest) throws ApiException {
        okhttp3.Call localVarCall = createNewValidateBeforeCall(subscriptionCreateNewRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call createNewAsync(SubscriptionCreateNewRequest subscriptionCreateNewRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNewValidateBeforeCall(subscriptionCreateNewRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class CreateNewRequestBuilder {
        private SubscriptionCreateNewRequestPayerInfo payerInfo;
        private SubscriptionCreateNewRequestPaymentSource paymentSource;
        private Integer planId;

        private CreateNewRequestBuilder() {
        }

        /**
         * Set payerInfo
         * @param payerInfo  (optional)
         * @return CreateNewRequestBuilder
         */
        public CreateNewRequestBuilder payerInfo(SubscriptionCreateNewRequestPayerInfo payerInfo) {
            this.payerInfo = payerInfo;
            return this;
        }
        
        /**
         * Set paymentSource
         * @param paymentSource  (optional)
         * @return CreateNewRequestBuilder
         */
        public CreateNewRequestBuilder paymentSource(SubscriptionCreateNewRequestPaymentSource paymentSource) {
            this.paymentSource = paymentSource;
            return this;
        }
        
        /**
         * Set planId
         * @param planId  (optional, default to 2283845)
         * @return CreateNewRequestBuilder
         */
        public CreateNewRequestBuilder planId(Integer planId) {
            this.planId = planId;
            return this;
        }
        
        /**
         * Build call for createNew
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            SubscriptionCreateNewRequest subscriptionCreateNewRequest = buildBodyParams();
            return createNewCall(subscriptionCreateNewRequest, _callback);
        }

        private SubscriptionCreateNewRequest buildBodyParams() {
            SubscriptionCreateNewRequest subscriptionCreateNewRequest = new SubscriptionCreateNewRequest();
            subscriptionCreateNewRequest.payerInfo(this.payerInfo);
            subscriptionCreateNewRequest.paymentSource(this.paymentSource);
            subscriptionCreateNewRequest.planId(this.planId);
            return subscriptionCreateNewRequest;
        }

        /**
         * Execute createNew request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            SubscriptionCreateNewRequest subscriptionCreateNewRequest = buildBodyParams();
            createNewWithHttpInfo(subscriptionCreateNewRequest);
        }

        /**
         * Execute createNew request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            SubscriptionCreateNewRequest subscriptionCreateNewRequest = buildBodyParams();
            return createNewWithHttpInfo(subscriptionCreateNewRequest);
        }

        /**
         * Execute createNew request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            SubscriptionCreateNewRequest subscriptionCreateNewRequest = buildBodyParams();
            return createNewAsync(subscriptionCreateNewRequest, _callback);
        }
    }

    /**
     * Create Subscription
     * 
     * @return CreateNewRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public CreateNewRequestBuilder createNew() throws IllegalArgumentException {
        return new CreateNewRequestBuilder();
    }
    private okhttp3.Call getSpecificCall(Integer subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/recurring/subscriptions/{subscriptionId}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0", "sec1" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSpecificValidateBeforeCall(Integer subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling getSpecific(Async)");
        }

        return getSpecificCall(subscriptionId, _callback);

    }


    private ApiResponse<Void> getSpecificWithHttpInfo(Integer subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = getSpecificValidateBeforeCall(subscriptionId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call getSpecificAsync(Integer subscriptionId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSpecificValidateBeforeCall(subscriptionId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class GetSpecificRequestBuilder {
        private final Integer subscriptionId;

        private GetSpecificRequestBuilder(Integer subscriptionId) {
            this.subscriptionId = subscriptionId;
        }

        /**
         * Build call for getSpecific
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getSpecificCall(subscriptionId, _callback);
        }


        /**
         * Execute getSpecific request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            getSpecificWithHttpInfo(subscriptionId);
        }

        /**
         * Execute getSpecific request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return getSpecificWithHttpInfo(subscriptionId);
        }

        /**
         * Execute getSpecific request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return getSpecificAsync(subscriptionId, _callback);
        }
    }

    /**
     * Retrieve Specific Subscription
     * 
     * @param subscriptionId BlueSnap identifier for the subscription. (required)
     * @return GetSpecificRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public GetSpecificRequestBuilder getSpecific(Integer subscriptionId) throws IllegalArgumentException {
        if (subscriptionId == null) throw new IllegalArgumentException("\"subscriptionId\" is required but got null");
        return new GetSpecificRequestBuilder(subscriptionId);
    }
    private okhttp3.Call getSwitchChargeAmountCall(String newplanid, String newquantity, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/recurring/subscriptions/:subscriptionId/switch-charge-amount";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (newplanid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("newplanid", newplanid));
        }

        if (newquantity != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("newquantity", newquantity));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0", "sec1" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSwitchChargeAmountValidateBeforeCall(String newplanid, String newquantity, final ApiCallback _callback) throws ApiException {
        return getSwitchChargeAmountCall(newplanid, newquantity, _callback);

    }


    private ApiResponse<Void> getSwitchChargeAmountWithHttpInfo(String newplanid, String newquantity) throws ApiException {
        okhttp3.Call localVarCall = getSwitchChargeAmountValidateBeforeCall(newplanid, newquantity, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call getSwitchChargeAmountAsync(String newplanid, String newquantity, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSwitchChargeAmountValidateBeforeCall(newplanid, newquantity, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class GetSwitchChargeAmountRequestBuilder {
        private String newplanid;
        private String newquantity;

        private GetSwitchChargeAmountRequestBuilder() {
        }

        /**
         * Set newplanid
         * @param newplanid  (optional, default to 111111)
         * @return GetSwitchChargeAmountRequestBuilder
         */
        public GetSwitchChargeAmountRequestBuilder newplanid(String newplanid) {
            this.newplanid = newplanid;
            return this;
        }
        
        /**
         * Set newquantity
         * @param newquantity  (optional, default to 2)
         * @return GetSwitchChargeAmountRequestBuilder
         */
        public GetSwitchChargeAmountRequestBuilder newquantity(String newquantity) {
            this.newquantity = newquantity;
            return this;
        }
        
        /**
         * Build call for getSwitchChargeAmount
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getSwitchChargeAmountCall(newplanid, newquantity, _callback);
        }


        /**
         * Execute getSwitchChargeAmount request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            getSwitchChargeAmountWithHttpInfo(newplanid, newquantity);
        }

        /**
         * Execute getSwitchChargeAmount request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return getSwitchChargeAmountWithHttpInfo(newplanid, newquantity);
        }

        /**
         * Execute getSwitchChargeAmount request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return getSwitchChargeAmountAsync(newplanid, newquantity, _callback);
        }
    }

    /**
     * Retrieve Subscription Switch Charge Amount
     * 
     * @return GetSwitchChargeAmountRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public GetSwitchChargeAmountRequestBuilder getSwitchChargeAmount() throws IllegalArgumentException {
        return new GetSwitchChargeAmountRequestBuilder();
    }
    private okhttp3.Call listAllSubscriptionsCall(String pagesize, String after, Boolean gettotal, Boolean fulldescription, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/recurring/subscriptions?{parameters}";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pagesize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pagesize", pagesize));
        }

        if (after != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("after", after));
        }

        if (gettotal != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("gettotal", gettotal));
        }

        if (fulldescription != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fulldescription", fulldescription));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0", "sec1" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAllSubscriptionsValidateBeforeCall(String pagesize, String after, Boolean gettotal, Boolean fulldescription, final ApiCallback _callback) throws ApiException {
        return listAllSubscriptionsCall(pagesize, after, gettotal, fulldescription, _callback);

    }


    private ApiResponse<Void> listAllSubscriptionsWithHttpInfo(String pagesize, String after, Boolean gettotal, Boolean fulldescription) throws ApiException {
        okhttp3.Call localVarCall = listAllSubscriptionsValidateBeforeCall(pagesize, after, gettotal, fulldescription, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call listAllSubscriptionsAsync(String pagesize, String after, Boolean gettotal, Boolean fulldescription, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = listAllSubscriptionsValidateBeforeCall(pagesize, after, gettotal, fulldescription, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class ListAllSubscriptionsRequestBuilder {
        private String pagesize;
        private String after;
        private Boolean gettotal;
        private Boolean fulldescription;

        private ListAllSubscriptionsRequestBuilder() {
        }

        /**
         * Set pagesize
         * @param pagesize  (optional, default to 5)
         * @return ListAllSubscriptionsRequestBuilder
         */
        public ListAllSubscriptionsRequestBuilder pagesize(String pagesize) {
            this.pagesize = pagesize;
            return this;
        }
        
        /**
         * Set after
         * @param after  (optional, default to 34567)
         * @return ListAllSubscriptionsRequestBuilder
         */
        public ListAllSubscriptionsRequestBuilder after(String after) {
            this.after = after;
            return this;
        }
        
        /**
         * Set gettotal
         * @param gettotal  (optional, default to true)
         * @return ListAllSubscriptionsRequestBuilder
         */
        public ListAllSubscriptionsRequestBuilder gettotal(Boolean gettotal) {
            this.gettotal = gettotal;
            return this;
        }
        
        /**
         * Set fulldescription
         * @param fulldescription  (optional, default to false)
         * @return ListAllSubscriptionsRequestBuilder
         */
        public ListAllSubscriptionsRequestBuilder fulldescription(Boolean fulldescription) {
            this.fulldescription = fulldescription;
            return this;
        }
        
        /**
         * Build call for listAllSubscriptions
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listAllSubscriptionsCall(pagesize, after, gettotal, fulldescription, _callback);
        }


        /**
         * Execute listAllSubscriptions request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            listAllSubscriptionsWithHttpInfo(pagesize, after, gettotal, fulldescription);
        }

        /**
         * Execute listAllSubscriptions request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return listAllSubscriptionsWithHttpInfo(pagesize, after, gettotal, fulldescription);
        }

        /**
         * Execute listAllSubscriptions request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return listAllSubscriptionsAsync(pagesize, after, gettotal, fulldescription, _callback);
        }
    }

    /**
     * Retrieve All Subscriptions
     * 
     * @return ListAllSubscriptionsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ListAllSubscriptionsRequestBuilder listAllSubscriptions() throws IllegalArgumentException {
        return new ListAllSubscriptionsRequestBuilder();
    }
    private okhttp3.Call listChargesCall(String pagesize, String after, Boolean fulldescription, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/:subscriptionId/charges?{parameters}";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pagesize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pagesize", pagesize));
        }

        if (after != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("after", after));
        }

        if (fulldescription != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fulldescription", fulldescription));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0", "sec1" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listChargesValidateBeforeCall(String pagesize, String after, Boolean fulldescription, final ApiCallback _callback) throws ApiException {
        return listChargesCall(pagesize, after, fulldescription, _callback);

    }


    private ApiResponse<Void> listChargesWithHttpInfo(String pagesize, String after, Boolean fulldescription) throws ApiException {
        okhttp3.Call localVarCall = listChargesValidateBeforeCall(pagesize, after, fulldescription, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call listChargesAsync(String pagesize, String after, Boolean fulldescription, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = listChargesValidateBeforeCall(pagesize, after, fulldescription, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class ListChargesRequestBuilder {
        private String pagesize;
        private String after;
        private Boolean fulldescription;

        private ListChargesRequestBuilder() {
        }

        /**
         * Set pagesize
         * @param pagesize  (optional, default to 3)
         * @return ListChargesRequestBuilder
         */
        public ListChargesRequestBuilder pagesize(String pagesize) {
            this.pagesize = pagesize;
            return this;
        }
        
        /**
         * Set after
         * @param after  (optional, default to 163193)
         * @return ListChargesRequestBuilder
         */
        public ListChargesRequestBuilder after(String after) {
            this.after = after;
            return this;
        }
        
        /**
         * Set fulldescription
         * @param fulldescription  (optional, default to false)
         * @return ListChargesRequestBuilder
         */
        public ListChargesRequestBuilder fulldescription(Boolean fulldescription) {
            this.fulldescription = fulldescription;
            return this;
        }
        
        /**
         * Build call for listCharges
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listChargesCall(pagesize, after, fulldescription, _callback);
        }


        /**
         * Execute listCharges request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            listChargesWithHttpInfo(pagesize, after, fulldescription);
        }

        /**
         * Execute listCharges request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return listChargesWithHttpInfo(pagesize, after, fulldescription);
        }

        /**
         * Execute listCharges request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return listChargesAsync(pagesize, after, fulldescription, _callback);
        }
    }

    /**
     * Retrieve All Charges for a Subscription
     * 
     * @return ListChargesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ListChargesRequestBuilder listCharges() throws IllegalArgumentException {
        return new ListChargesRequestBuilder();
    }
    private okhttp3.Call updateSubscriptionCall(Integer subscriptionId, SubscriptionUpdateSubscriptionRequest subscriptionUpdateSubscriptionRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = subscriptionUpdateSubscriptionRequest;

        // create path and map variables
        String localVarPath = "/recurring/subscriptions/{subscriptionId}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0", "sec1" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateSubscriptionValidateBeforeCall(Integer subscriptionId, SubscriptionUpdateSubscriptionRequest subscriptionUpdateSubscriptionRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling updateSubscription(Async)");
        }

        return updateSubscriptionCall(subscriptionId, subscriptionUpdateSubscriptionRequest, _callback);

    }


    private ApiResponse<Void> updateSubscriptionWithHttpInfo(Integer subscriptionId, SubscriptionUpdateSubscriptionRequest subscriptionUpdateSubscriptionRequest) throws ApiException {
        okhttp3.Call localVarCall = updateSubscriptionValidateBeforeCall(subscriptionId, subscriptionUpdateSubscriptionRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call updateSubscriptionAsync(Integer subscriptionId, SubscriptionUpdateSubscriptionRequest subscriptionUpdateSubscriptionRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateSubscriptionValidateBeforeCall(subscriptionId, subscriptionUpdateSubscriptionRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UpdateSubscriptionRequestBuilder {
        private final Integer subscriptionId;
        private String planId;

        private UpdateSubscriptionRequestBuilder(Integer subscriptionId) {
            this.subscriptionId = subscriptionId;
        }

        /**
         * Set planId
         * @param planId  (optional, default to 2283849)
         * @return UpdateSubscriptionRequestBuilder
         */
        public UpdateSubscriptionRequestBuilder planId(String planId) {
            this.planId = planId;
            return this;
        }
        
        /**
         * Build call for updateSubscription
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            SubscriptionUpdateSubscriptionRequest subscriptionUpdateSubscriptionRequest = buildBodyParams();
            return updateSubscriptionCall(subscriptionId, subscriptionUpdateSubscriptionRequest, _callback);
        }

        private SubscriptionUpdateSubscriptionRequest buildBodyParams() {
            SubscriptionUpdateSubscriptionRequest subscriptionUpdateSubscriptionRequest = new SubscriptionUpdateSubscriptionRequest();
            subscriptionUpdateSubscriptionRequest.planId(this.planId);
            return subscriptionUpdateSubscriptionRequest;
        }

        /**
         * Execute updateSubscription request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            SubscriptionUpdateSubscriptionRequest subscriptionUpdateSubscriptionRequest = buildBodyParams();
            updateSubscriptionWithHttpInfo(subscriptionId, subscriptionUpdateSubscriptionRequest);
        }

        /**
         * Execute updateSubscription request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            SubscriptionUpdateSubscriptionRequest subscriptionUpdateSubscriptionRequest = buildBodyParams();
            return updateSubscriptionWithHttpInfo(subscriptionId, subscriptionUpdateSubscriptionRequest);
        }

        /**
         * Execute updateSubscription request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            SubscriptionUpdateSubscriptionRequest subscriptionUpdateSubscriptionRequest = buildBodyParams();
            return updateSubscriptionAsync(subscriptionId, subscriptionUpdateSubscriptionRequest, _callback);
        }
    }

    /**
     * Update Subscription
     * 
     * @param subscriptionId BlueSnap identifier for the subscription. (required)
     * @return UpdateSubscriptionRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public UpdateSubscriptionRequestBuilder updateSubscription(Integer subscriptionId) throws IllegalArgumentException {
        if (subscriptionId == null) throw new IllegalArgumentException("\"subscriptionId\" is required but got null");
        return new UpdateSubscriptionRequestBuilder(subscriptionId);
    }
}
