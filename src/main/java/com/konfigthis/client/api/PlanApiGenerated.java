/*
 * API Settings
 * At BlueSnap, we look at payments a little differently. Our Payment Orchestration Platform helps businesses accept payments globally and is designed to increase revenue and reduces costs. We provide a comprehensive back-end solutions that simplifies the complexity of payments, managing the full process from start to finish.  BlueSnap supports payments through multiple sales channels such as online and mobile sales, marketplaces, subscriptions, invoice payments and manual orders through a virtual terminal. And for businesses looking for embedded payments, we offer white-labeled payments for platforms with automated underwriting and onboarding that supports marketplaces and split payments.  And with one integration and contract, businesses can sell in over 200 geographies with access to local acquiring in 47 countries, 110+ currencies and 100+ global payment types, including popular eWallets, automated accounts receivable, world-class fraud protection and chargeback management, built-in solutions for regulation and tax compliance, and unified global reporting to help businesses grow.  With a US headquarters in Waltham, MA, and EU headquarters in Dublin, Ireland, BlueSnap is backed by world-class private equity investors including Great Hill Partners and Parthenon Capital Partners.   Learn more at BlueSnap.com
 *
 * The version of the OpenAPI document: 8976-Tools
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.PlanCreateRecurringPlanRequest;
import com.konfigthis.client.model.PlanUpdateRecurringPlanRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class PlanApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PlanApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public PlanApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        if (apiClient.getSec1() == null) {
            throw new IllegalArgumentException("\"Authorization\" is required but no API key was provided. Please set \"Authorization\" with ApiClient#setSec1(String).");
        }
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createRecurringPlanCall(PlanCreateRecurringPlanRequest planCreateRecurringPlanRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = planCreateRecurringPlanRequest;

        // create path and map variables
        String localVarPath = "/recurring/plans";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0", "sec1" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createRecurringPlanValidateBeforeCall(PlanCreateRecurringPlanRequest planCreateRecurringPlanRequest, final ApiCallback _callback) throws ApiException {
        return createRecurringPlanCall(planCreateRecurringPlanRequest, _callback);

    }


    private ApiResponse<Void> createRecurringPlanWithHttpInfo(PlanCreateRecurringPlanRequest planCreateRecurringPlanRequest) throws ApiException {
        okhttp3.Call localVarCall = createRecurringPlanValidateBeforeCall(planCreateRecurringPlanRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call createRecurringPlanAsync(PlanCreateRecurringPlanRequest planCreateRecurringPlanRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = createRecurringPlanValidateBeforeCall(planCreateRecurringPlanRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class CreateRecurringPlanRequestBuilder {
        private String chargeFrequency;
        private Integer gracePeriodDays;
        private Integer trialPeriodDays;
        private Integer initialChargeAmount;
        private String name;
        private String currency;
        private Integer maxNumberOfCharges;
        private Float recurringChargeAmount;
        private Boolean chargeOnPlanSwitch;

        private CreateRecurringPlanRequestBuilder() {
        }

        /**
         * Set chargeFrequency
         * @param chargeFrequency  (optional, default to MONTHLY)
         * @return CreateRecurringPlanRequestBuilder
         */
        public CreateRecurringPlanRequestBuilder chargeFrequency(String chargeFrequency) {
            this.chargeFrequency = chargeFrequency;
            return this;
        }
        
        /**
         * Set gracePeriodDays
         * @param gracePeriodDays  (optional, default to 10)
         * @return CreateRecurringPlanRequestBuilder
         */
        public CreateRecurringPlanRequestBuilder gracePeriodDays(Integer gracePeriodDays) {
            this.gracePeriodDays = gracePeriodDays;
            return this;
        }
        
        /**
         * Set trialPeriodDays
         * @param trialPeriodDays  (optional, default to 14)
         * @return CreateRecurringPlanRequestBuilder
         */
        public CreateRecurringPlanRequestBuilder trialPeriodDays(Integer trialPeriodDays) {
            this.trialPeriodDays = trialPeriodDays;
            return this;
        }
        
        /**
         * Set initialChargeAmount
         * @param initialChargeAmount  (optional, default to 100)
         * @return CreateRecurringPlanRequestBuilder
         */
        public CreateRecurringPlanRequestBuilder initialChargeAmount(Integer initialChargeAmount) {
            this.initialChargeAmount = initialChargeAmount;
            return this;
        }
        
        /**
         * Set name
         * @param name  (optional, default to Gold Plan)
         * @return CreateRecurringPlanRequestBuilder
         */
        public CreateRecurringPlanRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Set currency
         * @param currency  (optional, default to USD)
         * @return CreateRecurringPlanRequestBuilder
         */
        public CreateRecurringPlanRequestBuilder currency(String currency) {
            this.currency = currency;
            return this;
        }
        
        /**
         * Set maxNumberOfCharges
         * @param maxNumberOfCharges  (optional, default to 12)
         * @return CreateRecurringPlanRequestBuilder
         */
        public CreateRecurringPlanRequestBuilder maxNumberOfCharges(Integer maxNumberOfCharges) {
            this.maxNumberOfCharges = maxNumberOfCharges;
            return this;
        }
        
        /**
         * Set recurringChargeAmount
         * @param recurringChargeAmount  (optional, default to 29.99)
         * @return CreateRecurringPlanRequestBuilder
         */
        public CreateRecurringPlanRequestBuilder recurringChargeAmount(Float recurringChargeAmount) {
            this.recurringChargeAmount = recurringChargeAmount;
            return this;
        }
        
        /**
         * Set chargeOnPlanSwitch
         * @param chargeOnPlanSwitch  (optional, default to true)
         * @return CreateRecurringPlanRequestBuilder
         */
        public CreateRecurringPlanRequestBuilder chargeOnPlanSwitch(Boolean chargeOnPlanSwitch) {
            this.chargeOnPlanSwitch = chargeOnPlanSwitch;
            return this;
        }
        
        /**
         * Build call for createRecurringPlan
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            PlanCreateRecurringPlanRequest planCreateRecurringPlanRequest = buildBodyParams();
            return createRecurringPlanCall(planCreateRecurringPlanRequest, _callback);
        }

        private PlanCreateRecurringPlanRequest buildBodyParams() {
            PlanCreateRecurringPlanRequest planCreateRecurringPlanRequest = new PlanCreateRecurringPlanRequest();
            planCreateRecurringPlanRequest.chargeFrequency(this.chargeFrequency);
            planCreateRecurringPlanRequest.gracePeriodDays(this.gracePeriodDays);
            planCreateRecurringPlanRequest.trialPeriodDays(this.trialPeriodDays);
            planCreateRecurringPlanRequest.initialChargeAmount(this.initialChargeAmount);
            planCreateRecurringPlanRequest.name(this.name);
            planCreateRecurringPlanRequest.currency(this.currency);
            planCreateRecurringPlanRequest.maxNumberOfCharges(this.maxNumberOfCharges);
            planCreateRecurringPlanRequest.recurringChargeAmount(this.recurringChargeAmount);
            planCreateRecurringPlanRequest.chargeOnPlanSwitch(this.chargeOnPlanSwitch);
            return planCreateRecurringPlanRequest;
        }

        /**
         * Execute createRecurringPlan request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            PlanCreateRecurringPlanRequest planCreateRecurringPlanRequest = buildBodyParams();
            createRecurringPlanWithHttpInfo(planCreateRecurringPlanRequest);
        }

        /**
         * Execute createRecurringPlan request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            PlanCreateRecurringPlanRequest planCreateRecurringPlanRequest = buildBodyParams();
            return createRecurringPlanWithHttpInfo(planCreateRecurringPlanRequest);
        }

        /**
         * Execute createRecurringPlan request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            PlanCreateRecurringPlanRequest planCreateRecurringPlanRequest = buildBodyParams();
            return createRecurringPlanAsync(planCreateRecurringPlanRequest, _callback);
        }
    }

    /**
     * Create Plan
     * 
     * @return CreateRecurringPlanRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public CreateRecurringPlanRequestBuilder createRecurringPlan() throws IllegalArgumentException {
        return new CreateRecurringPlanRequestBuilder();
    }
    private okhttp3.Call getAllCall(String pagesize, String after, Boolean gettotal, Boolean fulldescription, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/recurring/plans?{parameters}";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pagesize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pagesize", pagesize));
        }

        if (after != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("after", after));
        }

        if (gettotal != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("gettotal", gettotal));
        }

        if (fulldescription != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fulldescription", fulldescription));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0", "sec1" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllValidateBeforeCall(String pagesize, String after, Boolean gettotal, Boolean fulldescription, final ApiCallback _callback) throws ApiException {
        return getAllCall(pagesize, after, gettotal, fulldescription, _callback);

    }


    private ApiResponse<Void> getAllWithHttpInfo(String pagesize, String after, Boolean gettotal, Boolean fulldescription) throws ApiException {
        okhttp3.Call localVarCall = getAllValidateBeforeCall(pagesize, after, gettotal, fulldescription, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call getAllAsync(String pagesize, String after, Boolean gettotal, Boolean fulldescription, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllValidateBeforeCall(pagesize, after, gettotal, fulldescription, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class GetAllRequestBuilder {
        private String pagesize;
        private String after;
        private Boolean gettotal;
        private Boolean fulldescription;

        private GetAllRequestBuilder() {
        }

        /**
         * Set pagesize
         * @param pagesize  (optional, default to 5)
         * @return GetAllRequestBuilder
         */
        public GetAllRequestBuilder pagesize(String pagesize) {
            this.pagesize = pagesize;
            return this;
        }
        
        /**
         * Set after
         * @param after  (optional, default to 2185254)
         * @return GetAllRequestBuilder
         */
        public GetAllRequestBuilder after(String after) {
            this.after = after;
            return this;
        }
        
        /**
         * Set gettotal
         * @param gettotal  (optional, default to true)
         * @return GetAllRequestBuilder
         */
        public GetAllRequestBuilder gettotal(Boolean gettotal) {
            this.gettotal = gettotal;
            return this;
        }
        
        /**
         * Set fulldescription
         * @param fulldescription  (optional, default to false)
         * @return GetAllRequestBuilder
         */
        public GetAllRequestBuilder fulldescription(Boolean fulldescription) {
            this.fulldescription = fulldescription;
            return this;
        }
        
        /**
         * Build call for getAll
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAllCall(pagesize, after, gettotal, fulldescription, _callback);
        }


        /**
         * Execute getAll request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            getAllWithHttpInfo(pagesize, after, gettotal, fulldescription);
        }

        /**
         * Execute getAll request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return getAllWithHttpInfo(pagesize, after, gettotal, fulldescription);
        }

        /**
         * Execute getAll request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return getAllAsync(pagesize, after, gettotal, fulldescription, _callback);
        }
    }

    /**
     * Retrieve All Plans
     * 
     * @return GetAllRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public GetAllRequestBuilder getAll() throws IllegalArgumentException {
        return new GetAllRequestBuilder();
    }
    private okhttp3.Call getSpecificCall(Integer planId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/recurring/plans/{planId}"
            .replace("{" + "planId" + "}", localVarApiClient.escapeString(planId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0", "sec1" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSpecificValidateBeforeCall(Integer planId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'planId' is set
        if (planId == null) {
            throw new ApiException("Missing the required parameter 'planId' when calling getSpecific(Async)");
        }

        return getSpecificCall(planId, _callback);

    }


    private ApiResponse<Void> getSpecificWithHttpInfo(Integer planId) throws ApiException {
        okhttp3.Call localVarCall = getSpecificValidateBeforeCall(planId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call getSpecificAsync(Integer planId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSpecificValidateBeforeCall(planId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class GetSpecificRequestBuilder {
        private final Integer planId;

        private GetSpecificRequestBuilder(Integer planId) {
            this.planId = planId;
        }

        /**
         * Build call for getSpecific
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getSpecificCall(planId, _callback);
        }


        /**
         * Execute getSpecific request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            getSpecificWithHttpInfo(planId);
        }

        /**
         * Execute getSpecific request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return getSpecificWithHttpInfo(planId);
        }

        /**
         * Execute getSpecific request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return getSpecificAsync(planId, _callback);
        }
    }

    /**
     * Retrieve Specific Plan
     * 
     * @param planId BlueSnap identifier for the plan. (required)
     * @return GetSpecificRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public GetSpecificRequestBuilder getSpecific(Integer planId) throws IllegalArgumentException {
        if (planId == null) throw new IllegalArgumentException("\"planId\" is required but got null");
        return new GetSpecificRequestBuilder(planId);
    }
    private okhttp3.Call updateRecurringPlanCall(Integer planId, PlanUpdateRecurringPlanRequest planUpdateRecurringPlanRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = planUpdateRecurringPlanRequest;

        // create path and map variables
        String localVarPath = "/recurring/plans/{planId}"
            .replace("{" + "planId" + "}", localVarApiClient.escapeString(planId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0", "sec1" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateRecurringPlanValidateBeforeCall(Integer planId, PlanUpdateRecurringPlanRequest planUpdateRecurringPlanRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'planId' is set
        if (planId == null) {
            throw new ApiException("Missing the required parameter 'planId' when calling updateRecurringPlan(Async)");
        }

        return updateRecurringPlanCall(planId, planUpdateRecurringPlanRequest, _callback);

    }


    private ApiResponse<Void> updateRecurringPlanWithHttpInfo(Integer planId, PlanUpdateRecurringPlanRequest planUpdateRecurringPlanRequest) throws ApiException {
        okhttp3.Call localVarCall = updateRecurringPlanValidateBeforeCall(planId, planUpdateRecurringPlanRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call updateRecurringPlanAsync(Integer planId, PlanUpdateRecurringPlanRequest planUpdateRecurringPlanRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateRecurringPlanValidateBeforeCall(planId, planUpdateRecurringPlanRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UpdateRecurringPlanRequestBuilder {
        private final Integer planId;
        private String chargeFrequency;
        private String trialPeriodDays;
        private String initialChargeAmount;
        private String name;
        private String currency;
        private String recurringChargeAmount;

        private UpdateRecurringPlanRequestBuilder(Integer planId) {
            this.planId = planId;
        }

        /**
         * Set chargeFrequency
         * @param chargeFrequency  (optional, default to MONTHLY)
         * @return UpdateRecurringPlanRequestBuilder
         */
        public UpdateRecurringPlanRequestBuilder chargeFrequency(String chargeFrequency) {
            this.chargeFrequency = chargeFrequency;
            return this;
        }
        
        /**
         * Set trialPeriodDays
         * @param trialPeriodDays  (optional, default to 7)
         * @return UpdateRecurringPlanRequestBuilder
         */
        public UpdateRecurringPlanRequestBuilder trialPeriodDays(String trialPeriodDays) {
            this.trialPeriodDays = trialPeriodDays;
            return this;
        }
        
        /**
         * Set initialChargeAmount
         * @param initialChargeAmount  (optional, default to 30)
         * @return UpdateRecurringPlanRequestBuilder
         */
        public UpdateRecurringPlanRequestBuilder initialChargeAmount(String initialChargeAmount) {
            this.initialChargeAmount = initialChargeAmount;
            return this;
        }
        
        /**
         * Set name
         * @param name  (optional, default to Gold Plan)
         * @return UpdateRecurringPlanRequestBuilder
         */
        public UpdateRecurringPlanRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Set currency
         * @param currency  (optional, default to USD)
         * @return UpdateRecurringPlanRequestBuilder
         */
        public UpdateRecurringPlanRequestBuilder currency(String currency) {
            this.currency = currency;
            return this;
        }
        
        /**
         * Set recurringChargeAmount
         * @param recurringChargeAmount  (optional, default to 19)
         * @return UpdateRecurringPlanRequestBuilder
         */
        public UpdateRecurringPlanRequestBuilder recurringChargeAmount(String recurringChargeAmount) {
            this.recurringChargeAmount = recurringChargeAmount;
            return this;
        }
        
        /**
         * Build call for updateRecurringPlan
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            PlanUpdateRecurringPlanRequest planUpdateRecurringPlanRequest = buildBodyParams();
            return updateRecurringPlanCall(planId, planUpdateRecurringPlanRequest, _callback);
        }

        private PlanUpdateRecurringPlanRequest buildBodyParams() {
            PlanUpdateRecurringPlanRequest planUpdateRecurringPlanRequest = new PlanUpdateRecurringPlanRequest();
            planUpdateRecurringPlanRequest.chargeFrequency(this.chargeFrequency);
            planUpdateRecurringPlanRequest.trialPeriodDays(this.trialPeriodDays);
            planUpdateRecurringPlanRequest.initialChargeAmount(this.initialChargeAmount);
            planUpdateRecurringPlanRequest.name(this.name);
            planUpdateRecurringPlanRequest.currency(this.currency);
            planUpdateRecurringPlanRequest.recurringChargeAmount(this.recurringChargeAmount);
            return planUpdateRecurringPlanRequest;
        }

        /**
         * Execute updateRecurringPlan request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            PlanUpdateRecurringPlanRequest planUpdateRecurringPlanRequest = buildBodyParams();
            updateRecurringPlanWithHttpInfo(planId, planUpdateRecurringPlanRequest);
        }

        /**
         * Execute updateRecurringPlan request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            PlanUpdateRecurringPlanRequest planUpdateRecurringPlanRequest = buildBodyParams();
            return updateRecurringPlanWithHttpInfo(planId, planUpdateRecurringPlanRequest);
        }

        /**
         * Execute updateRecurringPlan request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            PlanUpdateRecurringPlanRequest planUpdateRecurringPlanRequest = buildBodyParams();
            return updateRecurringPlanAsync(planId, planUpdateRecurringPlanRequest, _callback);
        }
    }

    /**
     * Update Plan
     * 
     * @param planId BlueSnap identifier for the plan. (required)
     * @return UpdateRecurringPlanRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public UpdateRecurringPlanRequestBuilder updateRecurringPlan(Integer planId) throws IllegalArgumentException {
        if (planId == null) throw new IllegalArgumentException("\"planId\" is required but got null");
        return new UpdateRecurringPlanRequestBuilder(planId);
    }
}
