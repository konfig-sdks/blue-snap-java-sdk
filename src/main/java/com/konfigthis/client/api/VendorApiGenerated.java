/*
 * API Settings
 * At BlueSnap, we look at payments a little differently. Our Payment Orchestration Platform helps businesses accept payments globally and is designed to increase revenue and reduces costs. We provide a comprehensive back-end solutions that simplifies the complexity of payments, managing the full process from start to finish.  BlueSnap supports payments through multiple sales channels such as online and mobile sales, marketplaces, subscriptions, invoice payments and manual orders through a virtual terminal. And for businesses looking for embedded payments, we offer white-labeled payments for platforms with automated underwriting and onboarding that supports marketplaces and split payments.  And with one integration and contract, businesses can sell in over 200 geographies with access to local acquiring in 47 countries, 110+ currencies and 100+ global payment types, including popular eWallets, automated accounts receivable, world-class fraud protection and chargeback management, built-in solutions for regulation and tax compliance, and unified global reporting to help businesses grow.  With a US headquarters in Waltham, MA, and EU headquarters in Dublin, Ireland, BlueSnap is backed by world-class private equity investors including Great Hill Partners and Parthenon Capital Partners.   Learn more at BlueSnap.com
 *
 * The version of the OpenAPI document: 8976-Tools
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.VendorCreateRequest;
import com.konfigthis.client.model.VendorCreateRequestVendorAgreement;
import com.konfigthis.client.model.VendorCreateRequestVendorPrincipal;
import com.konfigthis.client.model.VendorUpdateVendorRequest;
import com.konfigthis.client.model.VendorUpdateVendorRequestPayoutInfoInner;
import com.konfigthis.client.model.VendorUpdateVendorRequestVendorAgreement;
import com.konfigthis.client.model.VendorUpdateVendorRequestVendorPrincipal;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class VendorApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public VendorApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public VendorApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        if (apiClient.getSec1() == null) {
            throw new IllegalArgumentException("\"Authorization\" is required but no API key was provided. Please set \"Authorization\" with ApiClient#setSec1(String).");
        }
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createCall(VendorCreateRequest vendorCreateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = vendorCreateRequest;

        // create path and map variables
        String localVarPath = "/vendors";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0", "sec1" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createValidateBeforeCall(VendorCreateRequest vendorCreateRequest, final ApiCallback _callback) throws ApiException {
        return createCall(vendorCreateRequest, _callback);

    }


    private ApiResponse<Void> createWithHttpInfo(VendorCreateRequest vendorCreateRequest) throws ApiException {
        okhttp3.Call localVarCall = createValidateBeforeCall(vendorCreateRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call createAsync(VendorCreateRequest vendorCreateRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = createValidateBeforeCall(vendorCreateRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class CreateRequestBuilder {
        private String email;
        private String firstName;
        private String lastName;
        private String phone;
        private String address;
        private String city;
        private String country;
        private String state;
        private String zip;
        private String defaultPayoutCurrency;
        private String ipnUrl;
        private VendorCreateRequestVendorPrincipal vendorPrincipal;
        private VendorCreateRequestVendorAgreement vendorAgreement;
        private Object payoutInfo;

        private CreateRequestBuilder() {
        }

        /**
         * Set email
         * @param email  (optional, default to vendor@example.com)
         * @return CreateRequestBuilder
         */
        public CreateRequestBuilder email(String email) {
            this.email = email;
            return this;
        }
        
        /**
         * Set firstName
         * @param firstName  (optional, default to Joe)
         * @return CreateRequestBuilder
         */
        public CreateRequestBuilder firstName(String firstName) {
            this.firstName = firstName;
            return this;
        }
        
        /**
         * Set lastName
         * @param lastName  (optional, default to Smith)
         * @return CreateRequestBuilder
         */
        public CreateRequestBuilder lastName(String lastName) {
            this.lastName = lastName;
            return this;
        }
        
        /**
         * Set phone
         * @param phone  (optional, default to 1-123-456-7890)
         * @return CreateRequestBuilder
         */
        public CreateRequestBuilder phone(String phone) {
            this.phone = phone;
            return this;
        }
        
        /**
         * Set address
         * @param address  (optional, default to 123 Main Street)
         * @return CreateRequestBuilder
         */
        public CreateRequestBuilder address(String address) {
            this.address = address;
            return this;
        }
        
        /**
         * Set city
         * @param city  (optional, default to Boston)
         * @return CreateRequestBuilder
         */
        public CreateRequestBuilder city(String city) {
            this.city = city;
            return this;
        }
        
        /**
         * Set country
         * @param country  (optional, default to US)
         * @return CreateRequestBuilder
         */
        public CreateRequestBuilder country(String country) {
            this.country = country;
            return this;
        }
        
        /**
         * Set state
         * @param state  (optional, default to MA)
         * @return CreateRequestBuilder
         */
        public CreateRequestBuilder state(String state) {
            this.state = state;
            return this;
        }
        
        /**
         * Set zip
         * @param zip  (optional, default to 02453)
         * @return CreateRequestBuilder
         */
        public CreateRequestBuilder zip(String zip) {
            this.zip = zip;
            return this;
        }
        
        /**
         * Set defaultPayoutCurrency
         * @param defaultPayoutCurrency  (optional, default to USD)
         * @return CreateRequestBuilder
         */
        public CreateRequestBuilder defaultPayoutCurrency(String defaultPayoutCurrency) {
            this.defaultPayoutCurrency = defaultPayoutCurrency;
            return this;
        }
        
        /**
         * Set ipnUrl
         * @param ipnUrl  (optional, default to https://ipnaddress.com)
         * @return CreateRequestBuilder
         */
        public CreateRequestBuilder ipnUrl(String ipnUrl) {
            this.ipnUrl = ipnUrl;
            return this;
        }
        
        /**
         * Set vendorPrincipal
         * @param vendorPrincipal  (optional)
         * @return CreateRequestBuilder
         */
        public CreateRequestBuilder vendorPrincipal(VendorCreateRequestVendorPrincipal vendorPrincipal) {
            this.vendorPrincipal = vendorPrincipal;
            return this;
        }
        
        /**
         * Set vendorAgreement
         * @param vendorAgreement  (optional)
         * @return CreateRequestBuilder
         */
        public CreateRequestBuilder vendorAgreement(VendorCreateRequestVendorAgreement vendorAgreement) {
            this.vendorAgreement = vendorAgreement;
            return this;
        }
        
        /**
         * Set payoutInfo
         * @param payoutInfo  (optional)
         * @return CreateRequestBuilder
         */
        public CreateRequestBuilder payoutInfo(Object payoutInfo) {
            this.payoutInfo = payoutInfo;
            return this;
        }
        
        /**
         * Build call for create
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            VendorCreateRequest vendorCreateRequest = buildBodyParams();
            return createCall(vendorCreateRequest, _callback);
        }

        private VendorCreateRequest buildBodyParams() {
            VendorCreateRequest vendorCreateRequest = new VendorCreateRequest();
            vendorCreateRequest.email(this.email);
            vendorCreateRequest.firstName(this.firstName);
            vendorCreateRequest.lastName(this.lastName);
            vendorCreateRequest.phone(this.phone);
            vendorCreateRequest.address(this.address);
            vendorCreateRequest.city(this.city);
            vendorCreateRequest.country(this.country);
            vendorCreateRequest.state(this.state);
            vendorCreateRequest.zip(this.zip);
            vendorCreateRequest.defaultPayoutCurrency(this.defaultPayoutCurrency);
            vendorCreateRequest.ipnUrl(this.ipnUrl);
            vendorCreateRequest.vendorPrincipal(this.vendorPrincipal);
            vendorCreateRequest.vendorAgreement(this.vendorAgreement);
            vendorCreateRequest.payoutInfo(this.payoutInfo);
            return vendorCreateRequest;
        }

        /**
         * Execute create request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            VendorCreateRequest vendorCreateRequest = buildBodyParams();
            createWithHttpInfo(vendorCreateRequest);
        }

        /**
         * Execute create request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            VendorCreateRequest vendorCreateRequest = buildBodyParams();
            return createWithHttpInfo(vendorCreateRequest);
        }

        /**
         * Execute create request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            VendorCreateRequest vendorCreateRequest = buildBodyParams();
            return createAsync(vendorCreateRequest, _callback);
        }
    }

    /**
     * Create Vendor
     * 
     * @return CreateRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public CreateRequestBuilder create() throws IllegalArgumentException {
        return new CreateRequestBuilder();
    }
    private okhttp3.Call getAllVendorsCall(Boolean gettotal, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/vendors?{parameters}";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (gettotal != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("gettotal", gettotal));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0", "sec1" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllVendorsValidateBeforeCall(Boolean gettotal, final ApiCallback _callback) throws ApiException {
        return getAllVendorsCall(gettotal, _callback);

    }


    private ApiResponse<Void> getAllVendorsWithHttpInfo(Boolean gettotal) throws ApiException {
        okhttp3.Call localVarCall = getAllVendorsValidateBeforeCall(gettotal, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call getAllVendorsAsync(Boolean gettotal, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllVendorsValidateBeforeCall(gettotal, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class GetAllVendorsRequestBuilder {
        private Boolean gettotal;

        private GetAllVendorsRequestBuilder() {
        }

        /**
         * Set gettotal
         * @param gettotal  (optional, default to true)
         * @return GetAllVendorsRequestBuilder
         */
        public GetAllVendorsRequestBuilder gettotal(Boolean gettotal) {
            this.gettotal = gettotal;
            return this;
        }
        
        /**
         * Build call for getAllVendors
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAllVendorsCall(gettotal, _callback);
        }


        /**
         * Execute getAllVendors request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            getAllVendorsWithHttpInfo(gettotal);
        }

        /**
         * Execute getAllVendors request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return getAllVendorsWithHttpInfo(gettotal);
        }

        /**
         * Execute getAllVendors request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return getAllVendorsAsync(gettotal, _callback);
        }
    }

    /**
     * Retrieve All Vendors
     * 
     * @return GetAllVendorsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public GetAllVendorsRequestBuilder getAllVendors() throws IllegalArgumentException {
        return new GetAllVendorsRequestBuilder();
    }
    private okhttp3.Call getVendorCall(Integer vendorId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/vendors/{vendorId}"
            .replace("{" + "vendorId" + "}", localVarApiClient.escapeString(vendorId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0", "sec1" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getVendorValidateBeforeCall(Integer vendorId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'vendorId' is set
        if (vendorId == null) {
            throw new ApiException("Missing the required parameter 'vendorId' when calling getVendor(Async)");
        }

        return getVendorCall(vendorId, _callback);

    }


    private ApiResponse<Void> getVendorWithHttpInfo(Integer vendorId) throws ApiException {
        okhttp3.Call localVarCall = getVendorValidateBeforeCall(vendorId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call getVendorAsync(Integer vendorId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getVendorValidateBeforeCall(vendorId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class GetVendorRequestBuilder {
        private final Integer vendorId;

        private GetVendorRequestBuilder(Integer vendorId) {
            this.vendorId = vendorId;
        }

        /**
         * Build call for getVendor
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getVendorCall(vendorId, _callback);
        }


        /**
         * Execute getVendor request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            getVendorWithHttpInfo(vendorId);
        }

        /**
         * Execute getVendor request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return getVendorWithHttpInfo(vendorId);
        }

        /**
         * Execute getVendor request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return getVendorAsync(vendorId, _callback);
        }
    }

    /**
     * Retrieve Vendor
     * 
     * @param vendorId BlueSnap identifier for the vendor (required)
     * @return GetVendorRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public GetVendorRequestBuilder getVendor(Integer vendorId) throws IllegalArgumentException {
        if (vendorId == null) throw new IllegalArgumentException("\"vendorId\" is required but got null");
        return new GetVendorRequestBuilder(vendorId);
    }
    private okhttp3.Call updateVendorCall(Integer vendorId, VendorUpdateVendorRequest vendorUpdateVendorRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = vendorUpdateVendorRequest;

        // create path and map variables
        String localVarPath = "/vendors/{vendorId}"
            .replace("{" + "vendorId" + "}", localVarApiClient.escapeString(vendorId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0", "sec1" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateVendorValidateBeforeCall(Integer vendorId, VendorUpdateVendorRequest vendorUpdateVendorRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'vendorId' is set
        if (vendorId == null) {
            throw new ApiException("Missing the required parameter 'vendorId' when calling updateVendor(Async)");
        }

        return updateVendorCall(vendorId, vendorUpdateVendorRequest, _callback);

    }


    private ApiResponse<Void> updateVendorWithHttpInfo(Integer vendorId, VendorUpdateVendorRequest vendorUpdateVendorRequest) throws ApiException {
        okhttp3.Call localVarCall = updateVendorValidateBeforeCall(vendorId, vendorUpdateVendorRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call updateVendorAsync(Integer vendorId, VendorUpdateVendorRequest vendorUpdateVendorRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateVendorValidateBeforeCall(vendorId, vendorUpdateVendorRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UpdateVendorRequestBuilder {
        private final Integer vendorId;
        private String email;
        private String name;
        private String firstName;
        private String lastName;
        private String address;
        private String city;
        private String zip;
        private String country;
        private String phone;
        private String state;
        private Integer taxId;
        private String vendorUrl;
        private String ipnUrl;
        private String defaultPayoutCurrency;
        private VendorUpdateVendorRequestVendorPrincipal vendorPrincipal;
        private List<VendorUpdateVendorRequestPayoutInfoInner> payoutInfo;
        private VendorUpdateVendorRequestVendorAgreement vendorAgreement;

        private UpdateVendorRequestBuilder(Integer vendorId) {
            this.vendorId = vendorId;
        }

        /**
         * Set email
         * @param email  (optional, default to vendor@bluesnap.com)
         * @return UpdateVendorRequestBuilder
         */
        public UpdateVendorRequestBuilder email(String email) {
            this.email = email;
            return this;
        }
        
        /**
         * Set name
         * @param name  (optional, default to Important Vendor)
         * @return UpdateVendorRequestBuilder
         */
        public UpdateVendorRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Set firstName
         * @param firstName  (optional, default to Joe)
         * @return UpdateVendorRequestBuilder
         */
        public UpdateVendorRequestBuilder firstName(String firstName) {
            this.firstName = firstName;
            return this;
        }
        
        /**
         * Set lastName
         * @param lastName  (optional, default to Smith)
         * @return UpdateVendorRequestBuilder
         */
        public UpdateVendorRequestBuilder lastName(String lastName) {
            this.lastName = lastName;
            return this;
        }
        
        /**
         * Set address
         * @param address  (optional, default to 123 Main Street)
         * @return UpdateVendorRequestBuilder
         */
        public UpdateVendorRequestBuilder address(String address) {
            this.address = address;
            return this;
        }
        
        /**
         * Set city
         * @param city  (optional, default to testing city)
         * @return UpdateVendorRequestBuilder
         */
        public UpdateVendorRequestBuilder city(String city) {
            this.city = city;
            return this;
        }
        
        /**
         * Set zip
         * @param zip  (optional, default to 02453)
         * @return UpdateVendorRequestBuilder
         */
        public UpdateVendorRequestBuilder zip(String zip) {
            this.zip = zip;
            return this;
        }
        
        /**
         * Set country
         * @param country  (optional, default to US)
         * @return UpdateVendorRequestBuilder
         */
        public UpdateVendorRequestBuilder country(String country) {
            this.country = country;
            return this;
        }
        
        /**
         * Set phone
         * @param phone  (optional, default to 1-054-976-6778)
         * @return UpdateVendorRequestBuilder
         */
        public UpdateVendorRequestBuilder phone(String phone) {
            this.phone = phone;
            return this;
        }
        
        /**
         * Set state
         * @param state  (optional, default to MA)
         * @return UpdateVendorRequestBuilder
         */
        public UpdateVendorRequestBuilder state(String state) {
            this.state = state;
            return this;
        }
        
        /**
         * Set taxId
         * @param taxId  (optional, default to 123456789)
         * @return UpdateVendorRequestBuilder
         */
        public UpdateVendorRequestBuilder taxId(Integer taxId) {
            this.taxId = taxId;
            return this;
        }
        
        /**
         * Set vendorUrl
         * @param vendorUrl  (optional, default to http://mycompany.com)
         * @return UpdateVendorRequestBuilder
         */
        public UpdateVendorRequestBuilder vendorUrl(String vendorUrl) {
            this.vendorUrl = vendorUrl;
            return this;
        }
        
        /**
         * Set ipnUrl
         * @param ipnUrl  (optional, default to https://ipnaddress.com)
         * @return UpdateVendorRequestBuilder
         */
        public UpdateVendorRequestBuilder ipnUrl(String ipnUrl) {
            this.ipnUrl = ipnUrl;
            return this;
        }
        
        /**
         * Set defaultPayoutCurrency
         * @param defaultPayoutCurrency  (optional, default to USD)
         * @return UpdateVendorRequestBuilder
         */
        public UpdateVendorRequestBuilder defaultPayoutCurrency(String defaultPayoutCurrency) {
            this.defaultPayoutCurrency = defaultPayoutCurrency;
            return this;
        }
        
        /**
         * Set vendorPrincipal
         * @param vendorPrincipal  (optional)
         * @return UpdateVendorRequestBuilder
         */
        public UpdateVendorRequestBuilder vendorPrincipal(VendorUpdateVendorRequestVendorPrincipal vendorPrincipal) {
            this.vendorPrincipal = vendorPrincipal;
            return this;
        }
        
        /**
         * Set payoutInfo
         * @param payoutInfo  (optional)
         * @return UpdateVendorRequestBuilder
         */
        public UpdateVendorRequestBuilder payoutInfo(List<VendorUpdateVendorRequestPayoutInfoInner> payoutInfo) {
            this.payoutInfo = payoutInfo;
            return this;
        }
        
        /**
         * Set vendorAgreement
         * @param vendorAgreement  (optional)
         * @return UpdateVendorRequestBuilder
         */
        public UpdateVendorRequestBuilder vendorAgreement(VendorUpdateVendorRequestVendorAgreement vendorAgreement) {
            this.vendorAgreement = vendorAgreement;
            return this;
        }
        
        /**
         * Build call for updateVendor
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            VendorUpdateVendorRequest vendorUpdateVendorRequest = buildBodyParams();
            return updateVendorCall(vendorId, vendorUpdateVendorRequest, _callback);
        }

        private VendorUpdateVendorRequest buildBodyParams() {
            VendorUpdateVendorRequest vendorUpdateVendorRequest = new VendorUpdateVendorRequest();
            vendorUpdateVendorRequest.email(this.email);
            vendorUpdateVendorRequest.name(this.name);
            vendorUpdateVendorRequest.firstName(this.firstName);
            vendorUpdateVendorRequest.lastName(this.lastName);
            vendorUpdateVendorRequest.address(this.address);
            vendorUpdateVendorRequest.city(this.city);
            vendorUpdateVendorRequest.zip(this.zip);
            vendorUpdateVendorRequest.country(this.country);
            vendorUpdateVendorRequest.phone(this.phone);
            vendorUpdateVendorRequest.state(this.state);
            vendorUpdateVendorRequest.taxId(this.taxId);
            vendorUpdateVendorRequest.vendorUrl(this.vendorUrl);
            vendorUpdateVendorRequest.ipnUrl(this.ipnUrl);
            vendorUpdateVendorRequest.defaultPayoutCurrency(this.defaultPayoutCurrency);
            vendorUpdateVendorRequest.vendorPrincipal(this.vendorPrincipal);
            vendorUpdateVendorRequest.payoutInfo(this.payoutInfo);
            vendorUpdateVendorRequest.vendorAgreement(this.vendorAgreement);
            return vendorUpdateVendorRequest;
        }

        /**
         * Execute updateVendor request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            VendorUpdateVendorRequest vendorUpdateVendorRequest = buildBodyParams();
            updateVendorWithHttpInfo(vendorId, vendorUpdateVendorRequest);
        }

        /**
         * Execute updateVendor request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            VendorUpdateVendorRequest vendorUpdateVendorRequest = buildBodyParams();
            return updateVendorWithHttpInfo(vendorId, vendorUpdateVendorRequest);
        }

        /**
         * Execute updateVendor request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            VendorUpdateVendorRequest vendorUpdateVendorRequest = buildBodyParams();
            return updateVendorAsync(vendorId, vendorUpdateVendorRequest, _callback);
        }
    }

    /**
     * Update Vendor
     * 
     * @param vendorId BlueSnap identifier for the vendor (required)
     * @return UpdateVendorRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public UpdateVendorRequestBuilder updateVendor(Integer vendorId) throws IllegalArgumentException {
        if (vendorId == null) throw new IllegalArgumentException("\"vendorId\" is required but got null");
        return new UpdateVendorRequestBuilder(vendorId);
    }
}
