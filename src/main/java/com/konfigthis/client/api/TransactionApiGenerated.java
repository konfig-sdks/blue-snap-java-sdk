/*
 * API Settings
 * At BlueSnap, we look at payments a little differently. Our Payment Orchestration Platform helps businesses accept payments globally and is designed to increase revenue and reduces costs. We provide a comprehensive back-end solutions that simplifies the complexity of payments, managing the full process from start to finish.  BlueSnap supports payments through multiple sales channels such as online and mobile sales, marketplaces, subscriptions, invoice payments and manual orders through a virtual terminal. And for businesses looking for embedded payments, we offer white-labeled payments for platforms with automated underwriting and onboarding that supports marketplaces and split payments.  And with one integration and contract, businesses can sell in over 200 geographies with access to local acquiring in 47 countries, 110+ currencies and 100+ global payment types, including popular eWallets, automated accounts receivable, world-class fraud protection and chargeback management, built-in solutions for regulation and tax compliance, and unified global reporting to help businesses grow.  With a US headquarters in Waltham, MA, and EU headquarters in Dublin, Ireland, BlueSnap is backed by world-class private equity investors including Great Hill Partners and Parthenon Capital Partners.   Learn more at BlueSnap.com
 *
 * The version of the OpenAPI document: 8976-Tools
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.TransactionCreateBatchTransactionRequest;
import com.konfigthis.client.model.TransactionCreateBatchTransactionRequestBatchTransaction;
import com.konfigthis.client.model.TransactionCreateSofortTransactionRequest;
import com.konfigthis.client.model.TransactionCreateSofortTransactionRequestAcssDirectDebitTransaction;
import com.konfigthis.client.model.TransactionCreateSofortTransactionRequestBecsDirectDebitTransaction;
import com.konfigthis.client.model.TransactionCreateSofortTransactionRequestEcpTransaction;
import com.konfigthis.client.model.TransactionCreateSofortTransactionRequestIdealTransaction;
import com.konfigthis.client.model.TransactionCreateSofortTransactionRequestLocalBankTransferTransaction;
import com.konfigthis.client.model.TransactionCreateSofortTransactionRequestPayerInfo;
import com.konfigthis.client.model.TransactionCreateSofortTransactionRequestPaypalTransaction;
import com.konfigthis.client.model.TransactionCreateSofortTransactionRequestSepaDirectDebitTransaction;
import com.konfigthis.client.model.TransactionCreateSofortTransactionRequestSofortTransaction;
import com.konfigthis.client.model.TransactionInitiateRefundRequest;
import com.konfigthis.client.model.TransactionInitiateRefundRequestTransactionMetaData;
import com.konfigthis.client.model.TransactionUpdatePaypalTransactionRequest;
import com.konfigthis.client.model.TransactionUpdatePaypalTransactionRequestPaypalTransaction;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class TransactionApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TransactionApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public TransactionApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        if (apiClient.getSec1() == null) {
            throw new IllegalArgumentException("\"Authorization\" is required but no API key was provided. Please set \"Authorization\" with ApiClient#setSec1(String).");
        }
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call approveMerchantTransactionCall(String transactionid, Boolean approvetransaction, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/transactions/approval";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (transactionid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("transactionid", transactionid));
        }

        if (approvetransaction != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("approvetransaction", approvetransaction));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0", "sec1" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call approveMerchantTransactionValidateBeforeCall(String transactionid, Boolean approvetransaction, final ApiCallback _callback) throws ApiException {
        return approveMerchantTransactionCall(transactionid, approvetransaction, _callback);

    }


    private ApiResponse<Void> approveMerchantTransactionWithHttpInfo(String transactionid, Boolean approvetransaction) throws ApiException {
        okhttp3.Call localVarCall = approveMerchantTransactionValidateBeforeCall(transactionid, approvetransaction, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call approveMerchantTransactionAsync(String transactionid, Boolean approvetransaction, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = approveMerchantTransactionValidateBeforeCall(transactionid, approvetransaction, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class ApproveMerchantTransactionRequestBuilder {
        private String transactionid;
        private Boolean approvetransaction;

        private ApproveMerchantTransactionRequestBuilder() {
        }

        /**
         * Set transactionid
         * @param transactionid either &#x60;transactionid&#x60; or &#x60;merchanttransactionid&#x60; &lt;b&gt;is required&lt;/b&gt; &lt;br /&gt;ID of the transaction to be approved/declined (optional, default to 38612140)
         * @return ApproveMerchantTransactionRequestBuilder
         */
        public ApproveMerchantTransactionRequestBuilder transactionid(String transactionid) {
            this.transactionid = transactionid;
            return this;
        }
        
        /**
         * Set approvetransaction
         * @param approvetransaction Set to &#x60;true&#x60; to approve the transaction or to &#x60;false&#x60; to decline the transaction. Default value is &#x60;true&#x60;. (optional, default to true)
         * @return ApproveMerchantTransactionRequestBuilder
         */
        public ApproveMerchantTransactionRequestBuilder approvetransaction(Boolean approvetransaction) {
            this.approvetransaction = approvetransaction;
            return this;
        }
        
        /**
         * Build call for approveMerchantTransaction
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return approveMerchantTransactionCall(transactionid, approvetransaction, _callback);
        }


        /**
         * Execute approveMerchantTransaction request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            approveMerchantTransactionWithHttpInfo(transactionid, approvetransaction);
        }

        /**
         * Execute approveMerchantTransaction request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return approveMerchantTransactionWithHttpInfo(transactionid, approvetransaction);
        }

        /**
         * Execute approveMerchantTransaction request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return approveMerchantTransactionAsync(transactionid, approvetransaction, _callback);
        }
    }

    /**
     * Merchant Approve Transaction
     * 
     * @return ApproveMerchantTransactionRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApproveMerchantTransactionRequestBuilder approveMerchantTransaction() throws IllegalArgumentException {
        return new ApproveMerchantTransactionRequestBuilder();
    }
    private okhttp3.Call cancelPendingRefundCall(String transactionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/transactions/pending-refund/{transactionId}"
            .replace("{" + "transactionId" + "}", localVarApiClient.escapeString(transactionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0", "sec1" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cancelPendingRefundValidateBeforeCall(String transactionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'transactionId' is set
        if (transactionId == null) {
            throw new ApiException("Missing the required parameter 'transactionId' when calling cancelPendingRefund(Async)");
        }

        return cancelPendingRefundCall(transactionId, _callback);

    }


    private ApiResponse<Void> cancelPendingRefundWithHttpInfo(String transactionId) throws ApiException {
        okhttp3.Call localVarCall = cancelPendingRefundValidateBeforeCall(transactionId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call cancelPendingRefundAsync(String transactionId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = cancelPendingRefundValidateBeforeCall(transactionId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class CancelPendingRefundRequestBuilder {
        private final String transactionId;

        private CancelPendingRefundRequestBuilder(String transactionId) {
            this.transactionId = transactionId;
        }

        /**
         * Build call for cancelPendingRefund
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return cancelPendingRefundCall(transactionId, _callback);
        }


        /**
         * Execute cancelPendingRefund request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            cancelPendingRefundWithHttpInfo(transactionId);
        }

        /**
         * Execute cancelPendingRefund request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return cancelPendingRefundWithHttpInfo(transactionId);
        }

        /**
         * Execute cancelPendingRefund request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return cancelPendingRefundAsync(transactionId, _callback);
        }
    }

    /**
     * Cancel Pending Refund
     * 
     * @param transactionId transactionId received from BlueSnap (required)
     * @return CancelPendingRefundRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public CancelPendingRefundRequestBuilder cancelPendingRefund(String transactionId) throws IllegalArgumentException {
        if (transactionId == null) throw new IllegalArgumentException("\"transactionId\" is required but got null");
            

        return new CancelPendingRefundRequestBuilder(transactionId);
    }
    private okhttp3.Call createBatchTransactionCall(TransactionCreateBatchTransactionRequest transactionCreateBatchTransactionRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = transactionCreateBatchTransactionRequest;

        // create path and map variables
        String localVarPath = "/batch-transactions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0", "sec1" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createBatchTransactionValidateBeforeCall(TransactionCreateBatchTransactionRequest transactionCreateBatchTransactionRequest, final ApiCallback _callback) throws ApiException {
        return createBatchTransactionCall(transactionCreateBatchTransactionRequest, _callback);

    }


    private ApiResponse<Void> createBatchTransactionWithHttpInfo(TransactionCreateBatchTransactionRequest transactionCreateBatchTransactionRequest) throws ApiException {
        okhttp3.Call localVarCall = createBatchTransactionValidateBeforeCall(transactionCreateBatchTransactionRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call createBatchTransactionAsync(TransactionCreateBatchTransactionRequest transactionCreateBatchTransactionRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = createBatchTransactionValidateBeforeCall(transactionCreateBatchTransactionRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class CreateBatchTransactionRequestBuilder {
        private TransactionCreateBatchTransactionRequestBatchTransaction batchTransaction;

        private CreateBatchTransactionRequestBuilder() {
        }

        /**
         * Set batchTransaction
         * @param batchTransaction  (optional)
         * @return CreateBatchTransactionRequestBuilder
         */
        public CreateBatchTransactionRequestBuilder batchTransaction(TransactionCreateBatchTransactionRequestBatchTransaction batchTransaction) {
            this.batchTransaction = batchTransaction;
            return this;
        }
        
        /**
         * Build call for createBatchTransaction
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            TransactionCreateBatchTransactionRequest transactionCreateBatchTransactionRequest = buildBodyParams();
            return createBatchTransactionCall(transactionCreateBatchTransactionRequest, _callback);
        }

        private TransactionCreateBatchTransactionRequest buildBodyParams() {
            TransactionCreateBatchTransactionRequest transactionCreateBatchTransactionRequest = new TransactionCreateBatchTransactionRequest();
            transactionCreateBatchTransactionRequest.batchTransaction(this.batchTransaction);
            return transactionCreateBatchTransactionRequest;
        }

        /**
         * Execute createBatchTransaction request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            TransactionCreateBatchTransactionRequest transactionCreateBatchTransactionRequest = buildBodyParams();
            createBatchTransactionWithHttpInfo(transactionCreateBatchTransactionRequest);
        }

        /**
         * Execute createBatchTransaction request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            TransactionCreateBatchTransactionRequest transactionCreateBatchTransactionRequest = buildBodyParams();
            return createBatchTransactionWithHttpInfo(transactionCreateBatchTransactionRequest);
        }

        /**
         * Execute createBatchTransaction request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            TransactionCreateBatchTransactionRequest transactionCreateBatchTransactionRequest = buildBodyParams();
            return createBatchTransactionAsync(transactionCreateBatchTransactionRequest, _callback);
        }
    }

    /**
     * Create Batch Transaction
     * 
     * @return CreateBatchTransactionRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public CreateBatchTransactionRequestBuilder createBatchTransaction() throws IllegalArgumentException {
        return new CreateBatchTransactionRequestBuilder();
    }
    private okhttp3.Call createSofortTransactionCall(TransactionCreateSofortTransactionRequest transactionCreateSofortTransactionRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = transactionCreateSofortTransactionRequest;

        // create path and map variables
        String localVarPath = "/alt-transactions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0", "sec1" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createSofortTransactionValidateBeforeCall(TransactionCreateSofortTransactionRequest transactionCreateSofortTransactionRequest, final ApiCallback _callback) throws ApiException {
        return createSofortTransactionCall(transactionCreateSofortTransactionRequest, _callback);

    }


    private ApiResponse<Void> createSofortTransactionWithHttpInfo(TransactionCreateSofortTransactionRequest transactionCreateSofortTransactionRequest) throws ApiException {
        okhttp3.Call localVarCall = createSofortTransactionValidateBeforeCall(transactionCreateSofortTransactionRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call createSofortTransactionAsync(TransactionCreateSofortTransactionRequest transactionCreateSofortTransactionRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = createSofortTransactionValidateBeforeCall(transactionCreateSofortTransactionRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class CreateSofortTransactionRequestBuilder {
        private TransactionCreateSofortTransactionRequestEcpTransaction ecpTransaction;
        private Float amount;
        private TransactionCreateSofortTransactionRequestPayerInfo payerInfo;
        private String softDescriptor;
        private String currency;
        private Boolean authorizedByShopper;
        private TransactionCreateSofortTransactionRequestBecsDirectDebitTransaction becsDirectDebitTransaction;
        private TransactionCreateSofortTransactionRequestIdealTransaction idealTransaction;
        private TransactionCreateSofortTransactionRequestLocalBankTransferTransaction localBankTransferTransaction;
        private TransactionCreateSofortTransactionRequestPaypalTransaction paypalTransaction;
        private TransactionCreateSofortTransactionRequestAcssDirectDebitTransaction acssDirectDebitTransaction;
        private TransactionCreateSofortTransactionRequestSepaDirectDebitTransaction sepaDirectDebitTransaction;
        private TransactionCreateSofortTransactionRequestSofortTransaction sofortTransaction;

        private CreateSofortTransactionRequestBuilder() {
        }

        /**
         * Set ecpTransaction
         * @param ecpTransaction  (optional)
         * @return CreateSofortTransactionRequestBuilder
         */
        public CreateSofortTransactionRequestBuilder ecpTransaction(TransactionCreateSofortTransactionRequestEcpTransaction ecpTransaction) {
            this.ecpTransaction = ecpTransaction;
            return this;
        }
        
        /**
         * Set amount
         * @param amount  (optional, default to 42)
         * @return CreateSofortTransactionRequestBuilder
         */
        public CreateSofortTransactionRequestBuilder amount(Float amount) {
            this.amount = amount;
            return this;
        }
        
        /**
         * Set payerInfo
         * @param payerInfo  (optional)
         * @return CreateSofortTransactionRequestBuilder
         */
        public CreateSofortTransactionRequestBuilder payerInfo(TransactionCreateSofortTransactionRequestPayerInfo payerInfo) {
            this.payerInfo = payerInfo;
            return this;
        }
        
        /**
         * Set softDescriptor
         * @param softDescriptor  (optional, default to ABC COMPANY)
         * @return CreateSofortTransactionRequestBuilder
         */
        public CreateSofortTransactionRequestBuilder softDescriptor(String softDescriptor) {
            this.softDescriptor = softDescriptor;
            return this;
        }
        
        /**
         * Set currency
         * @param currency  (optional, default to GBP)
         * @return CreateSofortTransactionRequestBuilder
         */
        public CreateSofortTransactionRequestBuilder currency(String currency) {
            this.currency = currency;
            return this;
        }
        
        /**
         * Set authorizedByShopper
         * @param authorizedByShopper  (optional, default to true)
         * @return CreateSofortTransactionRequestBuilder
         */
        public CreateSofortTransactionRequestBuilder authorizedByShopper(Boolean authorizedByShopper) {
            this.authorizedByShopper = authorizedByShopper;
            return this;
        }
        
        /**
         * Set becsDirectDebitTransaction
         * @param becsDirectDebitTransaction  (optional)
         * @return CreateSofortTransactionRequestBuilder
         */
        public CreateSofortTransactionRequestBuilder becsDirectDebitTransaction(TransactionCreateSofortTransactionRequestBecsDirectDebitTransaction becsDirectDebitTransaction) {
            this.becsDirectDebitTransaction = becsDirectDebitTransaction;
            return this;
        }
        
        /**
         * Set idealTransaction
         * @param idealTransaction  (optional)
         * @return CreateSofortTransactionRequestBuilder
         */
        public CreateSofortTransactionRequestBuilder idealTransaction(TransactionCreateSofortTransactionRequestIdealTransaction idealTransaction) {
            this.idealTransaction = idealTransaction;
            return this;
        }
        
        /**
         * Set localBankTransferTransaction
         * @param localBankTransferTransaction  (optional)
         * @return CreateSofortTransactionRequestBuilder
         */
        public CreateSofortTransactionRequestBuilder localBankTransferTransaction(TransactionCreateSofortTransactionRequestLocalBankTransferTransaction localBankTransferTransaction) {
            this.localBankTransferTransaction = localBankTransferTransaction;
            return this;
        }
        
        /**
         * Set paypalTransaction
         * @param paypalTransaction  (optional)
         * @return CreateSofortTransactionRequestBuilder
         */
        public CreateSofortTransactionRequestBuilder paypalTransaction(TransactionCreateSofortTransactionRequestPaypalTransaction paypalTransaction) {
            this.paypalTransaction = paypalTransaction;
            return this;
        }
        
        /**
         * Set acssDirectDebitTransaction
         * @param acssDirectDebitTransaction  (optional)
         * @return CreateSofortTransactionRequestBuilder
         */
        public CreateSofortTransactionRequestBuilder acssDirectDebitTransaction(TransactionCreateSofortTransactionRequestAcssDirectDebitTransaction acssDirectDebitTransaction) {
            this.acssDirectDebitTransaction = acssDirectDebitTransaction;
            return this;
        }
        
        /**
         * Set sepaDirectDebitTransaction
         * @param sepaDirectDebitTransaction  (optional)
         * @return CreateSofortTransactionRequestBuilder
         */
        public CreateSofortTransactionRequestBuilder sepaDirectDebitTransaction(TransactionCreateSofortTransactionRequestSepaDirectDebitTransaction sepaDirectDebitTransaction) {
            this.sepaDirectDebitTransaction = sepaDirectDebitTransaction;
            return this;
        }
        
        /**
         * Set sofortTransaction
         * @param sofortTransaction  (optional)
         * @return CreateSofortTransactionRequestBuilder
         */
        public CreateSofortTransactionRequestBuilder sofortTransaction(TransactionCreateSofortTransactionRequestSofortTransaction sofortTransaction) {
            this.sofortTransaction = sofortTransaction;
            return this;
        }
        
        /**
         * Build call for createSofortTransaction
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            TransactionCreateSofortTransactionRequest transactionCreateSofortTransactionRequest = buildBodyParams();
            return createSofortTransactionCall(transactionCreateSofortTransactionRequest, _callback);
        }

        private TransactionCreateSofortTransactionRequest buildBodyParams() {
            TransactionCreateSofortTransactionRequest transactionCreateSofortTransactionRequest = new TransactionCreateSofortTransactionRequest();
            transactionCreateSofortTransactionRequest.ecpTransaction(this.ecpTransaction);
            transactionCreateSofortTransactionRequest.amount(this.amount);
            transactionCreateSofortTransactionRequest.payerInfo(this.payerInfo);
            transactionCreateSofortTransactionRequest.softDescriptor(this.softDescriptor);
            transactionCreateSofortTransactionRequest.currency(this.currency);
            transactionCreateSofortTransactionRequest.authorizedByShopper(this.authorizedByShopper);
            transactionCreateSofortTransactionRequest.becsDirectDebitTransaction(this.becsDirectDebitTransaction);
            transactionCreateSofortTransactionRequest.idealTransaction(this.idealTransaction);
            transactionCreateSofortTransactionRequest.localBankTransferTransaction(this.localBankTransferTransaction);
            transactionCreateSofortTransactionRequest.paypalTransaction(this.paypalTransaction);
            transactionCreateSofortTransactionRequest.acssDirectDebitTransaction(this.acssDirectDebitTransaction);
            transactionCreateSofortTransactionRequest.sepaDirectDebitTransaction(this.sepaDirectDebitTransaction);
            transactionCreateSofortTransactionRequest.sofortTransaction(this.sofortTransaction);
            return transactionCreateSofortTransactionRequest;
        }

        /**
         * Execute createSofortTransaction request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            TransactionCreateSofortTransactionRequest transactionCreateSofortTransactionRequest = buildBodyParams();
            createSofortTransactionWithHttpInfo(transactionCreateSofortTransactionRequest);
        }

        /**
         * Execute createSofortTransaction request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            TransactionCreateSofortTransactionRequest transactionCreateSofortTransactionRequest = buildBodyParams();
            return createSofortTransactionWithHttpInfo(transactionCreateSofortTransactionRequest);
        }

        /**
         * Execute createSofortTransaction request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            TransactionCreateSofortTransactionRequest transactionCreateSofortTransactionRequest = buildBodyParams();
            return createSofortTransactionAsync(transactionCreateSofortTransactionRequest, _callback);
        }
    }

    /**
     * Create Sofort Transaction
     * 
     * @return CreateSofortTransactionRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public CreateSofortTransactionRequestBuilder createSofortTransaction() throws IllegalArgumentException {
        return new CreateSofortTransactionRequestBuilder();
    }
    private okhttp3.Call getBatchTransactionCall(String batchId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/batch-transactions/{batchId}"
            .replace("{" + "batchId" + "}", localVarApiClient.escapeString(batchId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0", "sec1" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getBatchTransactionValidateBeforeCall(String batchId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'batchId' is set
        if (batchId == null) {
            throw new ApiException("Missing the required parameter 'batchId' when calling getBatchTransaction(Async)");
        }

        return getBatchTransactionCall(batchId, _callback);

    }


    private ApiResponse<Void> getBatchTransactionWithHttpInfo(String batchId) throws ApiException {
        okhttp3.Call localVarCall = getBatchTransactionValidateBeforeCall(batchId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call getBatchTransactionAsync(String batchId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getBatchTransactionValidateBeforeCall(batchId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class GetBatchTransactionRequestBuilder {
        private final String batchId;

        private GetBatchTransactionRequestBuilder(String batchId) {
            this.batchId = batchId;
        }

        /**
         * Build call for getBatchTransaction
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getBatchTransactionCall(batchId, _callback);
        }


        /**
         * Execute getBatchTransaction request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            getBatchTransactionWithHttpInfo(batchId);
        }

        /**
         * Execute getBatchTransaction request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return getBatchTransactionWithHttpInfo(batchId);
        }

        /**
         * Execute getBatchTransaction request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return getBatchTransactionAsync(batchId, _callback);
        }
    }

    /**
     * Retrieve Batch Transaction
     * 
     * @param batchId batch ID sent in the Create Batch Transaction request (required)
     * @return GetBatchTransactionRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public GetBatchTransactionRequestBuilder getBatchTransaction(String batchId) throws IllegalArgumentException {
        if (batchId == null) throw new IllegalArgumentException("\"batchId\" is required but got null");
            

        return new GetBatchTransactionRequestBuilder(batchId);
    }
    private okhttp3.Call getByIdCall(String transactionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/transactions/{transactionId}"
            .replace("{" + "transactionId" + "}", localVarApiClient.escapeString(transactionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0", "sec1" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getByIdValidateBeforeCall(String transactionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'transactionId' is set
        if (transactionId == null) {
            throw new ApiException("Missing the required parameter 'transactionId' when calling getById(Async)");
        }

        return getByIdCall(transactionId, _callback);

    }


    private ApiResponse<Void> getByIdWithHttpInfo(String transactionId) throws ApiException {
        okhttp3.Call localVarCall = getByIdValidateBeforeCall(transactionId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call getByIdAsync(String transactionId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getByIdValidateBeforeCall(transactionId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class GetByIdRequestBuilder {
        private final String transactionId;

        private GetByIdRequestBuilder(String transactionId) {
            this.transactionId = transactionId;
        }

        /**
         * Build call for getById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getByIdCall(transactionId, _callback);
        }


        /**
         * Execute getById request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            getByIdWithHttpInfo(transactionId);
        }

        /**
         * Execute getById request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return getByIdWithHttpInfo(transactionId);
        }

        /**
         * Execute getById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return getByIdAsync(transactionId, _callback);
        }
    }

    /**
     * Retrieve
     * 
     * @param transactionId transaction ID received in the response from BlueSnap (required)
     * @return GetByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public GetByIdRequestBuilder getById(String transactionId) throws IllegalArgumentException {
        if (transactionId == null) throw new IllegalArgumentException("\"transactionId\" is required but got null");
            

        return new GetByIdRequestBuilder(transactionId);
    }
    private okhttp3.Call getPaypalTransactionCall(String orderId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/alt-transactions/resolve?orderId={orderId}"
            .replace("{" + "orderId" + "}", localVarApiClient.escapeString(orderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0", "sec1" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPaypalTransactionValidateBeforeCall(String orderId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling getPaypalTransaction(Async)");
        }

        return getPaypalTransactionCall(orderId, _callback);

    }


    private ApiResponse<Void> getPaypalTransactionWithHttpInfo(String orderId) throws ApiException {
        okhttp3.Call localVarCall = getPaypalTransactionValidateBeforeCall(orderId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call getPaypalTransactionAsync(String orderId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPaypalTransactionValidateBeforeCall(orderId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class GetPaypalTransactionRequestBuilder {
        private final String orderId;

        private GetPaypalTransactionRequestBuilder(String orderId) {
            this.orderId = orderId;
        }

        /**
         * Build call for getPaypalTransaction
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getPaypalTransactionCall(orderId, _callback);
        }


        /**
         * Execute getPaypalTransaction request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            getPaypalTransactionWithHttpInfo(orderId);
        }

        /**
         * Execute getPaypalTransaction request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return getPaypalTransactionWithHttpInfo(orderId);
        }

        /**
         * Execute getPaypalTransaction request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return getPaypalTransactionAsync(orderId, _callback);
        }
    }

    /**
     * Retrieve PayPal Transaction
     * 
     * @param orderId order ID received in the response (required)
     * @return GetPaypalTransactionRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public GetPaypalTransactionRequestBuilder getPaypalTransaction(String orderId) throws IllegalArgumentException {
        if (orderId == null) throw new IllegalArgumentException("\"orderId\" is required but got null");
            

        return new GetPaypalTransactionRequestBuilder(orderId);
    }
    private okhttp3.Call getPreNotificationDebitAgreementCall(String transactionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/agreements/prenotification/{transactionId}";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (transactionId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("transactionId", transactionId));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0", "sec1" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPreNotificationDebitAgreementValidateBeforeCall(String transactionId, final ApiCallback _callback) throws ApiException {
        return getPreNotificationDebitAgreementCall(transactionId, _callback);

    }


    private ApiResponse<Void> getPreNotificationDebitAgreementWithHttpInfo(String transactionId) throws ApiException {
        okhttp3.Call localVarCall = getPreNotificationDebitAgreementValidateBeforeCall(transactionId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call getPreNotificationDebitAgreementAsync(String transactionId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPreNotificationDebitAgreementValidateBeforeCall(transactionId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class GetPreNotificationDebitAgreementRequestBuilder {
        private String transactionId;

        private GetPreNotificationDebitAgreementRequestBuilder() {
        }

        /**
         * Set transactionId
         * @param transactionId Argument included in the response for the Create Debit Agreement request (optional, default to 38943468)
         * @return GetPreNotificationDebitAgreementRequestBuilder
         */
        public GetPreNotificationDebitAgreementRequestBuilder transactionId(String transactionId) {
            this.transactionId = transactionId;
            return this;
        }
        
        /**
         * Build call for getPreNotificationDebitAgreement
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getPreNotificationDebitAgreementCall(transactionId, _callback);
        }


        /**
         * Execute getPreNotificationDebitAgreement request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            getPreNotificationDebitAgreementWithHttpInfo(transactionId);
        }

        /**
         * Execute getPreNotificationDebitAgreement request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return getPreNotificationDebitAgreementWithHttpInfo(transactionId);
        }

        /**
         * Execute getPreNotificationDebitAgreement request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return getPreNotificationDebitAgreementAsync(transactionId, _callback);
        }
    }

    /**
     * Get Pre-Notification Debit Agreement
     * for Australia and Canada
     * @return GetPreNotificationDebitAgreementRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public GetPreNotificationDebitAgreementRequestBuilder getPreNotificationDebitAgreement() throws IllegalArgumentException {
        return new GetPreNotificationDebitAgreementRequestBuilder();
    }
    private okhttp3.Call getSepaDdCall(String transactionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/alt-transactions/{transactionId}"
            .replace("{" + "transactionId" + "}", localVarApiClient.escapeString(transactionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0", "sec1" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSepaDdValidateBeforeCall(String transactionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'transactionId' is set
        if (transactionId == null) {
            throw new ApiException("Missing the required parameter 'transactionId' when calling getSepaDd(Async)");
        }

        return getSepaDdCall(transactionId, _callback);

    }


    private ApiResponse<Void> getSepaDdWithHttpInfo(String transactionId) throws ApiException {
        okhttp3.Call localVarCall = getSepaDdValidateBeforeCall(transactionId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call getSepaDdAsync(String transactionId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSepaDdValidateBeforeCall(transactionId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class GetSepaDdRequestBuilder {
        private final String transactionId;

        private GetSepaDdRequestBuilder(String transactionId) {
            this.transactionId = transactionId;
        }

        /**
         * Build call for getSepaDd
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getSepaDdCall(transactionId, _callback);
        }


        /**
         * Execute getSepaDd request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            getSepaDdWithHttpInfo(transactionId);
        }

        /**
         * Execute getSepaDd request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return getSepaDdWithHttpInfo(transactionId);
        }

        /**
         * Execute getSepaDd request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return getSepaDdAsync(transactionId, _callback);
        }
    }

    /**
     * Retrieve SEPA DD Transaction
     * 
     * @param transactionId transaction ID received in the response from BlueSnap (required)
     * @return GetSepaDdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public GetSepaDdRequestBuilder getSepaDd(String transactionId) throws IllegalArgumentException {
        if (transactionId == null) throw new IllegalArgumentException("\"transactionId\" is required but got null");
            

        return new GetSepaDdRequestBuilder(transactionId);
    }
    private okhttp3.Call getSofortTransactionCall(Integer orderId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/alt-transactions/resolve";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (orderId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("orderId", orderId));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0", "sec1" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSofortTransactionValidateBeforeCall(Integer orderId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling getSofortTransaction(Async)");
        }

        return getSofortTransactionCall(orderId, _callback);

    }


    private ApiResponse<Void> getSofortTransactionWithHttpInfo(Integer orderId) throws ApiException {
        okhttp3.Call localVarCall = getSofortTransactionValidateBeforeCall(orderId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call getSofortTransactionAsync(Integer orderId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSofortTransactionValidateBeforeCall(orderId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class GetSofortTransactionRequestBuilder {
        private final Integer orderId;

        private GetSofortTransactionRequestBuilder(Integer orderId) {
            this.orderId = orderId;
        }

        /**
         * Build call for getSofortTransaction
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getSofortTransactionCall(orderId, _callback);
        }


        /**
         * Execute getSofortTransaction request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            getSofortTransactionWithHttpInfo(orderId);
        }

        /**
         * Execute getSofortTransaction request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return getSofortTransactionWithHttpInfo(orderId);
        }

        /**
         * Execute getSofortTransaction request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return getSofortTransactionAsync(orderId, _callback);
        }
    }

    /**
     * Retrieve Sofort Transaction
     * 
     * @param orderId Order ID received in the Create Sofort Transaction response from BlueSnap (required)
     * @return GetSofortTransactionRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public GetSofortTransactionRequestBuilder getSofortTransaction(Integer orderId) throws IllegalArgumentException {
        if (orderId == null) throw new IllegalArgumentException("\"orderId\" is required but got null");
        return new GetSofortTransactionRequestBuilder(orderId);
    }
    private okhttp3.Call initiateRefundCall(String transactionId, TransactionInitiateRefundRequest transactionInitiateRefundRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = transactionInitiateRefundRequest;

        // create path and map variables
        String localVarPath = "/transactions/refund/{transactionId}"
            .replace("{" + "transactionId" + "}", localVarApiClient.escapeString(transactionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0", "sec1" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call initiateRefundValidateBeforeCall(String transactionId, TransactionInitiateRefundRequest transactionInitiateRefundRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'transactionId' is set
        if (transactionId == null) {
            throw new ApiException("Missing the required parameter 'transactionId' when calling initiateRefund(Async)");
        }

        return initiateRefundCall(transactionId, transactionInitiateRefundRequest, _callback);

    }


    private ApiResponse<Void> initiateRefundWithHttpInfo(String transactionId, TransactionInitiateRefundRequest transactionInitiateRefundRequest) throws ApiException {
        okhttp3.Call localVarCall = initiateRefundValidateBeforeCall(transactionId, transactionInitiateRefundRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call initiateRefundAsync(String transactionId, TransactionInitiateRefundRequest transactionInitiateRefundRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = initiateRefundValidateBeforeCall(transactionId, transactionInitiateRefundRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class InitiateRefundRequestBuilder {
        private final String transactionId;
        private String reason;
        private Boolean cancelSubscriptions;
        private TransactionInitiateRefundRequestTransactionMetaData transactionMetaData;

        private InitiateRefundRequestBuilder(String transactionId) {
            this.transactionId = transactionId;
        }

        /**
         * Set reason
         * @param reason  (optional, default to Refund for order #1992)
         * @return InitiateRefundRequestBuilder
         */
        public InitiateRefundRequestBuilder reason(String reason) {
            this.reason = reason;
            return this;
        }
        
        /**
         * Set cancelSubscriptions
         * @param cancelSubscriptions  (optional, default to false)
         * @return InitiateRefundRequestBuilder
         */
        public InitiateRefundRequestBuilder cancelSubscriptions(Boolean cancelSubscriptions) {
            this.cancelSubscriptions = cancelSubscriptions;
            return this;
        }
        
        /**
         * Set transactionMetaData
         * @param transactionMetaData  (optional)
         * @return InitiateRefundRequestBuilder
         */
        public InitiateRefundRequestBuilder transactionMetaData(TransactionInitiateRefundRequestTransactionMetaData transactionMetaData) {
            this.transactionMetaData = transactionMetaData;
            return this;
        }
        
        /**
         * Build call for initiateRefund
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            TransactionInitiateRefundRequest transactionInitiateRefundRequest = buildBodyParams();
            return initiateRefundCall(transactionId, transactionInitiateRefundRequest, _callback);
        }

        private TransactionInitiateRefundRequest buildBodyParams() {
            TransactionInitiateRefundRequest transactionInitiateRefundRequest = new TransactionInitiateRefundRequest();
            transactionInitiateRefundRequest.reason(this.reason);
            transactionInitiateRefundRequest.cancelSubscriptions(this.cancelSubscriptions);
            transactionInitiateRefundRequest.transactionMetaData(this.transactionMetaData);
            return transactionInitiateRefundRequest;
        }

        /**
         * Execute initiateRefund request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            TransactionInitiateRefundRequest transactionInitiateRefundRequest = buildBodyParams();
            initiateRefundWithHttpInfo(transactionId, transactionInitiateRefundRequest);
        }

        /**
         * Execute initiateRefund request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            TransactionInitiateRefundRequest transactionInitiateRefundRequest = buildBodyParams();
            return initiateRefundWithHttpInfo(transactionId, transactionInitiateRefundRequest);
        }

        /**
         * Execute initiateRefund request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            TransactionInitiateRefundRequest transactionInitiateRefundRequest = buildBodyParams();
            return initiateRefundAsync(transactionId, transactionInitiateRefundRequest, _callback);
        }
    }

    /**
     * Refund
     * 
     * @param transactionId ID of the transaction to be refunded &lt;br&gt; Required if not using &#x60;merchantTransactionId&#x60; (required)
     * @return InitiateRefundRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public InitiateRefundRequestBuilder initiateRefund(String transactionId) throws IllegalArgumentException {
        if (transactionId == null) throw new IllegalArgumentException("\"transactionId\" is required but got null");
            

        return new InitiateRefundRequestBuilder(transactionId);
    }
    private okhttp3.Call updatePaypalTransactionCall(TransactionUpdatePaypalTransactionRequest transactionUpdatePaypalTransactionRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = transactionUpdatePaypalTransactionRequest;

        // create path and map variables
        String localVarPath = "/alt-transactions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0", "sec1" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updatePaypalTransactionValidateBeforeCall(TransactionUpdatePaypalTransactionRequest transactionUpdatePaypalTransactionRequest, final ApiCallback _callback) throws ApiException {
        return updatePaypalTransactionCall(transactionUpdatePaypalTransactionRequest, _callback);

    }


    private ApiResponse<Void> updatePaypalTransactionWithHttpInfo(TransactionUpdatePaypalTransactionRequest transactionUpdatePaypalTransactionRequest) throws ApiException {
        okhttp3.Call localVarCall = updatePaypalTransactionValidateBeforeCall(transactionUpdatePaypalTransactionRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call updatePaypalTransactionAsync(TransactionUpdatePaypalTransactionRequest transactionUpdatePaypalTransactionRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updatePaypalTransactionValidateBeforeCall(transactionUpdatePaypalTransactionRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UpdatePaypalTransactionRequestBuilder {
        private Float amount;
        private String currency;
        private TransactionUpdatePaypalTransactionRequestPaypalTransaction paypalTransaction;

        private UpdatePaypalTransactionRequestBuilder() {
        }

        /**
         * Set amount
         * @param amount  (optional, default to 105)
         * @return UpdatePaypalTransactionRequestBuilder
         */
        public UpdatePaypalTransactionRequestBuilder amount(Float amount) {
            this.amount = amount;
            return this;
        }
        
        /**
         * Set currency
         * @param currency  (optional, default to USD)
         * @return UpdatePaypalTransactionRequestBuilder
         */
        public UpdatePaypalTransactionRequestBuilder currency(String currency) {
            this.currency = currency;
            return this;
        }
        
        /**
         * Set paypalTransaction
         * @param paypalTransaction  (optional)
         * @return UpdatePaypalTransactionRequestBuilder
         */
        public UpdatePaypalTransactionRequestBuilder paypalTransaction(TransactionUpdatePaypalTransactionRequestPaypalTransaction paypalTransaction) {
            this.paypalTransaction = paypalTransaction;
            return this;
        }
        
        /**
         * Build call for updatePaypalTransaction
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            TransactionUpdatePaypalTransactionRequest transactionUpdatePaypalTransactionRequest = buildBodyParams();
            return updatePaypalTransactionCall(transactionUpdatePaypalTransactionRequest, _callback);
        }

        private TransactionUpdatePaypalTransactionRequest buildBodyParams() {
            TransactionUpdatePaypalTransactionRequest transactionUpdatePaypalTransactionRequest = new TransactionUpdatePaypalTransactionRequest();
            transactionUpdatePaypalTransactionRequest.amount(this.amount);
            transactionUpdatePaypalTransactionRequest.currency(this.currency);
            transactionUpdatePaypalTransactionRequest.paypalTransaction(this.paypalTransaction);
            return transactionUpdatePaypalTransactionRequest;
        }

        /**
         * Execute updatePaypalTransaction request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            TransactionUpdatePaypalTransactionRequest transactionUpdatePaypalTransactionRequest = buildBodyParams();
            updatePaypalTransactionWithHttpInfo(transactionUpdatePaypalTransactionRequest);
        }

        /**
         * Execute updatePaypalTransaction request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            TransactionUpdatePaypalTransactionRequest transactionUpdatePaypalTransactionRequest = buildBodyParams();
            return updatePaypalTransactionWithHttpInfo(transactionUpdatePaypalTransactionRequest);
        }

        /**
         * Execute updatePaypalTransaction request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            TransactionUpdatePaypalTransactionRequest transactionUpdatePaypalTransactionRequest = buildBodyParams();
            return updatePaypalTransactionAsync(transactionUpdatePaypalTransactionRequest, _callback);
        }
    }

    /**
     * Update PayPal Transaction
     * 
     * @return UpdatePaypalTransactionRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public UpdatePaypalTransactionRequestBuilder updatePaypalTransaction() throws IllegalArgumentException {
        return new UpdatePaypalTransactionRequestBuilder();
    }
}
