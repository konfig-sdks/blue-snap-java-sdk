/*
 * API Settings
 * At BlueSnap, we look at payments a little differently. Our Payment Orchestration Platform helps businesses accept payments globally and is designed to increase revenue and reduces costs. We provide a comprehensive back-end solutions that simplifies the complexity of payments, managing the full process from start to finish.  BlueSnap supports payments through multiple sales channels such as online and mobile sales, marketplaces, subscriptions, invoice payments and manual orders through a virtual terminal. And for businesses looking for embedded payments, we offer white-labeled payments for platforms with automated underwriting and onboarding that supports marketplaces and split payments.  And with one integration and contract, businesses can sell in over 200 geographies with access to local acquiring in 47 countries, 110+ currencies and 100+ global payment types, including popular eWallets, automated accounts receivable, world-class fraud protection and chargeback management, built-in solutions for regulation and tax compliance, and unified global reporting to help businesses grow.  With a US headquarters in Waltham, MA, and EU headquarters in Dublin, Ireland, BlueSnap is backed by world-class private equity investors including Great Hill Partners and Parthenon Capital Partners.   Learn more at BlueSnap.com
 *
 * The version of the OpenAPI document: 8976-Tools
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;



import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class AgreementApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AgreementApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public AgreementApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        if (apiClient.getSec1() == null) {
            throw new IllegalArgumentException("\"Authorization\" is required but no API key was provided. Please set \"Authorization\" with ApiClient#setSec1(String).");
        }
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createDebitForAusCanCall(String region, String type, String planid, String overriderecurringchargeamount, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/agreements/debit/{region}/{type}"
            .replace("{" + "region" + "}", localVarApiClient.escapeString(region.toString()))
            .replace("{" + "type" + "}", localVarApiClient.escapeString(type.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (planid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("planid", planid));
        }

        if (overriderecurringchargeamount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("overriderecurringchargeamount", overriderecurringchargeamount));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0", "sec1" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createDebitForAusCanValidateBeforeCall(String region, String type, String planid, String overriderecurringchargeamount, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'region' is set
        if (region == null) {
            throw new ApiException("Missing the required parameter 'region' when calling createDebitForAusCan(Async)");
        }

        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling createDebitForAusCan(Async)");
        }

        return createDebitForAusCanCall(region, type, planid, overriderecurringchargeamount, _callback);

    }


    private ApiResponse<Void> createDebitForAusCanWithHttpInfo(String region, String type, String planid, String overriderecurringchargeamount) throws ApiException {
        okhttp3.Call localVarCall = createDebitForAusCanValidateBeforeCall(region, type, planid, overriderecurringchargeamount, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call createDebitForAusCanAsync(String region, String type, String planid, String overriderecurringchargeamount, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = createDebitForAusCanValidateBeforeCall(region, type, planid, overriderecurringchargeamount, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class CreateDebitForAusCanRequestBuilder {
        private final String region;
        private final String type;
        private String planid;
        private String overriderecurringchargeamount;

        private CreateDebitForAusCanRequestBuilder(String region, String type) {
            this.region = region;
            this.type = type;
        }

        /**
         * Set planid
         * @param planid SKU number (optional)
         * @return CreateDebitForAusCanRequestBuilder
         */
        public CreateDebitForAusCanRequestBuilder planid(String planid) {
            this.planid = planid;
            return this;
        }
        
        /**
         * Set overriderecurringchargeamount
         * @param overriderecurringchargeamount the amount which overrides recurring charge (optional)
         * @return CreateDebitForAusCanRequestBuilder
         */
        public CreateDebitForAusCanRequestBuilder overriderecurringchargeamount(String overriderecurringchargeamount) {
            this.overriderecurringchargeamount = overriderecurringchargeamount;
            return this;
        }
        
        /**
         * Build call for createDebitForAusCan
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return createDebitForAusCanCall(region, type, planid, overriderecurringchargeamount, _callback);
        }


        /**
         * Execute createDebitForAusCan request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            createDebitForAusCanWithHttpInfo(region, type, planid, overriderecurringchargeamount);
        }

        /**
         * Execute createDebitForAusCan request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return createDebitForAusCanWithHttpInfo(region, type, planid, overriderecurringchargeamount);
        }

        /**
         * Execute createDebitForAusCan request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return createDebitForAusCanAsync(region, type, planid, overriderecurringchargeamount, _callback);
        }
    }

    /**
     * Create Debit Agreement
     * for Australia and Canada
     * @param region Represents the country. Possible Values: &#x60;au&#x60;, &#x60;ca&#x60; (required)
     * @param type Represents the mandate type. Possible Values: &#x60;onetime&#x60;,&#x60;recurring&#x60;, &#x60;ondemand&#x60; (required)
     * @return CreateDebitForAusCanRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public CreateDebitForAusCanRequestBuilder createDebitForAusCan(String region, String type) throws IllegalArgumentException {
        if (region == null) throw new IllegalArgumentException("\"region\" is required but got null");
            

        if (type == null) throw new IllegalArgumentException("\"type\" is required but got null");
            

        return new CreateDebitForAusCanRequestBuilder(region, type);
    }
    private okhttp3.Call getDebitCall(String agreementId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/agreements/{agreementId}";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (agreementId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("agreementId", agreementId));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0", "sec1" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDebitValidateBeforeCall(String agreementId, final ApiCallback _callback) throws ApiException {
        return getDebitCall(agreementId, _callback);

    }


    private ApiResponse<Void> getDebitWithHttpInfo(String agreementId) throws ApiException {
        okhttp3.Call localVarCall = getDebitValidateBeforeCall(agreementId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call getDebitAsync(String agreementId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDebitValidateBeforeCall(agreementId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class GetDebitRequestBuilder {
        private String agreementId;

        private GetDebitRequestBuilder() {
        }

        /**
         * Set agreementId
         * @param agreementId Argument included in the response for the Create Debit Agreement request (optional, default to 1065)
         * @return GetDebitRequestBuilder
         */
        public GetDebitRequestBuilder agreementId(String agreementId) {
            this.agreementId = agreementId;
            return this;
        }
        
        /**
         * Build call for getDebit
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getDebitCall(agreementId, _callback);
        }


        /**
         * Execute getDebit request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            getDebitWithHttpInfo(agreementId);
        }

        /**
         * Execute getDebit request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return getDebitWithHttpInfo(agreementId);
        }

        /**
         * Execute getDebit request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return getDebitAsync(agreementId, _callback);
        }
    }

    /**
     * Get Debit Agreement
     * for Australia and Canada
     * @return GetDebitRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public GetDebitRequestBuilder getDebit() throws IllegalArgumentException {
        return new GetDebitRequestBuilder();
    }
}
