/*
 * API Settings
 * At BlueSnap, we look at payments a little differently. Our Payment Orchestration Platform helps businesses accept payments globally and is designed to increase revenue and reduces costs. We provide a comprehensive back-end solutions that simplifies the complexity of payments, managing the full process from start to finish.  BlueSnap supports payments through multiple sales channels such as online and mobile sales, marketplaces, subscriptions, invoice payments and manual orders through a virtual terminal. And for businesses looking for embedded payments, we offer white-labeled payments for platforms with automated underwriting and onboarding that supports marketplaces and split payments.  And with one integration and contract, businesses can sell in over 200 geographies with access to local acquiring in 47 countries, 110+ currencies and 100+ global payment types, including popular eWallets, automated accounts receivable, world-class fraud protection and chargeback management, built-in solutions for regulation and tax compliance, and unified global reporting to help businesses grow.  With a US headquarters in Waltham, MA, and EU headquarters in Dublin, Ireland, BlueSnap is backed by world-class private equity investors including Great Hill Partners and Parthenon Capital Partners.   Learn more at BlueSnap.com
 *
 * The version of the OpenAPI document: 8976-Tools
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * PlanCreateRecurringPlanRequest
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class PlanCreateRecurringPlanRequest {
  public static final String SERIALIZED_NAME_CHARGE_FREQUENCY = "chargeFrequency";
  @SerializedName(SERIALIZED_NAME_CHARGE_FREQUENCY)
  private String chargeFrequency = "MONTHLY";

  public static final String SERIALIZED_NAME_GRACE_PERIOD_DAYS = "gracePeriodDays";
  @SerializedName(SERIALIZED_NAME_GRACE_PERIOD_DAYS)
  private Integer gracePeriodDays = 10;

  public static final String SERIALIZED_NAME_TRIAL_PERIOD_DAYS = "trialPeriodDays";
  @SerializedName(SERIALIZED_NAME_TRIAL_PERIOD_DAYS)
  private Integer trialPeriodDays = 14;

  public static final String SERIALIZED_NAME_INITIAL_CHARGE_AMOUNT = "initialChargeAmount";
  @SerializedName(SERIALIZED_NAME_INITIAL_CHARGE_AMOUNT)
  private Integer initialChargeAmount = 100;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name = "Gold Plan";

  public static final String SERIALIZED_NAME_CURRENCY = "currency";
  @SerializedName(SERIALIZED_NAME_CURRENCY)
  private String currency = "USD";

  public static final String SERIALIZED_NAME_MAX_NUMBER_OF_CHARGES = "maxNumberOfCharges";
  @SerializedName(SERIALIZED_NAME_MAX_NUMBER_OF_CHARGES)
  private Integer maxNumberOfCharges = 12;

  public static final String SERIALIZED_NAME_RECURRING_CHARGE_AMOUNT = "recurringChargeAmount";
  @SerializedName(SERIALIZED_NAME_RECURRING_CHARGE_AMOUNT)
  private Float recurringChargeAmount = 29.99f;

  public static final String SERIALIZED_NAME_CHARGE_ON_PLAN_SWITCH = "chargeOnPlanSwitch";
  @SerializedName(SERIALIZED_NAME_CHARGE_ON_PLAN_SWITCH)
  private Boolean chargeOnPlanSwitch = true;

  public PlanCreateRecurringPlanRequest() {
  }

  public PlanCreateRecurringPlanRequest chargeFrequency(String chargeFrequency) {
    
    
    
    
    this.chargeFrequency = chargeFrequency;
    return this;
  }

   /**
   * Get chargeFrequency
   * @return chargeFrequency
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "MONTHLY", value = "")

  public String getChargeFrequency() {
    return chargeFrequency;
  }


  public void setChargeFrequency(String chargeFrequency) {
    
    
    
    this.chargeFrequency = chargeFrequency;
  }


  public PlanCreateRecurringPlanRequest gracePeriodDays(Integer gracePeriodDays) {
    
    
    
    
    this.gracePeriodDays = gracePeriodDays;
    return this;
  }

   /**
   * Get gracePeriodDays
   * @return gracePeriodDays
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "10", value = "")

  public Integer getGracePeriodDays() {
    return gracePeriodDays;
  }


  public void setGracePeriodDays(Integer gracePeriodDays) {
    
    
    
    this.gracePeriodDays = gracePeriodDays;
  }


  public PlanCreateRecurringPlanRequest trialPeriodDays(Integer trialPeriodDays) {
    
    
    
    
    this.trialPeriodDays = trialPeriodDays;
    return this;
  }

   /**
   * Get trialPeriodDays
   * @return trialPeriodDays
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "14", value = "")

  public Integer getTrialPeriodDays() {
    return trialPeriodDays;
  }


  public void setTrialPeriodDays(Integer trialPeriodDays) {
    
    
    
    this.trialPeriodDays = trialPeriodDays;
  }


  public PlanCreateRecurringPlanRequest initialChargeAmount(Integer initialChargeAmount) {
    
    
    
    
    this.initialChargeAmount = initialChargeAmount;
    return this;
  }

   /**
   * Get initialChargeAmount
   * @return initialChargeAmount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "100", value = "")

  public Integer getInitialChargeAmount() {
    return initialChargeAmount;
  }


  public void setInitialChargeAmount(Integer initialChargeAmount) {
    
    
    
    this.initialChargeAmount = initialChargeAmount;
  }


  public PlanCreateRecurringPlanRequest name(String name) {
    
    
    
    
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Gold Plan", value = "")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    
    
    
    this.name = name;
  }


  public PlanCreateRecurringPlanRequest currency(String currency) {
    
    
    
    
    this.currency = currency;
    return this;
  }

   /**
   * Get currency
   * @return currency
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "USD", value = "")

  public String getCurrency() {
    return currency;
  }


  public void setCurrency(String currency) {
    
    
    
    this.currency = currency;
  }


  public PlanCreateRecurringPlanRequest maxNumberOfCharges(Integer maxNumberOfCharges) {
    
    
    
    
    this.maxNumberOfCharges = maxNumberOfCharges;
    return this;
  }

   /**
   * Get maxNumberOfCharges
   * @return maxNumberOfCharges
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "12", value = "")

  public Integer getMaxNumberOfCharges() {
    return maxNumberOfCharges;
  }


  public void setMaxNumberOfCharges(Integer maxNumberOfCharges) {
    
    
    
    this.maxNumberOfCharges = maxNumberOfCharges;
  }


  public PlanCreateRecurringPlanRequest recurringChargeAmount(Float recurringChargeAmount) {
    
    
    
    
    this.recurringChargeAmount = recurringChargeAmount;
    return this;
  }

   /**
   * Get recurringChargeAmount
   * @return recurringChargeAmount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "29.99", value = "")

  public Float getRecurringChargeAmount() {
    return recurringChargeAmount;
  }


  public void setRecurringChargeAmount(Float recurringChargeAmount) {
    
    
    
    this.recurringChargeAmount = recurringChargeAmount;
  }


  public PlanCreateRecurringPlanRequest chargeOnPlanSwitch(Boolean chargeOnPlanSwitch) {
    
    
    
    
    this.chargeOnPlanSwitch = chargeOnPlanSwitch;
    return this;
  }

   /**
   * Get chargeOnPlanSwitch
   * @return chargeOnPlanSwitch
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "")

  public Boolean getChargeOnPlanSwitch() {
    return chargeOnPlanSwitch;
  }


  public void setChargeOnPlanSwitch(Boolean chargeOnPlanSwitch) {
    
    
    
    this.chargeOnPlanSwitch = chargeOnPlanSwitch;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the PlanCreateRecurringPlanRequest instance itself
   */
  public PlanCreateRecurringPlanRequest putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PlanCreateRecurringPlanRequest planCreateRecurringPlanRequest = (PlanCreateRecurringPlanRequest) o;
    return Objects.equals(this.chargeFrequency, planCreateRecurringPlanRequest.chargeFrequency) &&
        Objects.equals(this.gracePeriodDays, planCreateRecurringPlanRequest.gracePeriodDays) &&
        Objects.equals(this.trialPeriodDays, planCreateRecurringPlanRequest.trialPeriodDays) &&
        Objects.equals(this.initialChargeAmount, planCreateRecurringPlanRequest.initialChargeAmount) &&
        Objects.equals(this.name, planCreateRecurringPlanRequest.name) &&
        Objects.equals(this.currency, planCreateRecurringPlanRequest.currency) &&
        Objects.equals(this.maxNumberOfCharges, planCreateRecurringPlanRequest.maxNumberOfCharges) &&
        Objects.equals(this.recurringChargeAmount, planCreateRecurringPlanRequest.recurringChargeAmount) &&
        Objects.equals(this.chargeOnPlanSwitch, planCreateRecurringPlanRequest.chargeOnPlanSwitch)&&
        Objects.equals(this.additionalProperties, planCreateRecurringPlanRequest.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(chargeFrequency, gracePeriodDays, trialPeriodDays, initialChargeAmount, name, currency, maxNumberOfCharges, recurringChargeAmount, chargeOnPlanSwitch, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PlanCreateRecurringPlanRequest {\n");
    sb.append("    chargeFrequency: ").append(toIndentedString(chargeFrequency)).append("\n");
    sb.append("    gracePeriodDays: ").append(toIndentedString(gracePeriodDays)).append("\n");
    sb.append("    trialPeriodDays: ").append(toIndentedString(trialPeriodDays)).append("\n");
    sb.append("    initialChargeAmount: ").append(toIndentedString(initialChargeAmount)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    maxNumberOfCharges: ").append(toIndentedString(maxNumberOfCharges)).append("\n");
    sb.append("    recurringChargeAmount: ").append(toIndentedString(recurringChargeAmount)).append("\n");
    sb.append("    chargeOnPlanSwitch: ").append(toIndentedString(chargeOnPlanSwitch)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("chargeFrequency");
    openapiFields.add("gracePeriodDays");
    openapiFields.add("trialPeriodDays");
    openapiFields.add("initialChargeAmount");
    openapiFields.add("name");
    openapiFields.add("currency");
    openapiFields.add("maxNumberOfCharges");
    openapiFields.add("recurringChargeAmount");
    openapiFields.add("chargeOnPlanSwitch");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to PlanCreateRecurringPlanRequest
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!PlanCreateRecurringPlanRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PlanCreateRecurringPlanRequest is not found in the empty JSON string", PlanCreateRecurringPlanRequest.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("chargeFrequency") != null && !jsonObj.get("chargeFrequency").isJsonNull()) && !jsonObj.get("chargeFrequency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `chargeFrequency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("chargeFrequency").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("currency") != null && !jsonObj.get("currency").isJsonNull()) && !jsonObj.get("currency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currency").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PlanCreateRecurringPlanRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PlanCreateRecurringPlanRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PlanCreateRecurringPlanRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PlanCreateRecurringPlanRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<PlanCreateRecurringPlanRequest>() {
           @Override
           public void write(JsonWriter out, PlanCreateRecurringPlanRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public PlanCreateRecurringPlanRequest read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             PlanCreateRecurringPlanRequest instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of PlanCreateRecurringPlanRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of PlanCreateRecurringPlanRequest
  * @throws IOException if the JSON string is invalid with respect to PlanCreateRecurringPlanRequest
  */
  public static PlanCreateRecurringPlanRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PlanCreateRecurringPlanRequest.class);
  }

 /**
  * Convert an instance of PlanCreateRecurringPlanRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

