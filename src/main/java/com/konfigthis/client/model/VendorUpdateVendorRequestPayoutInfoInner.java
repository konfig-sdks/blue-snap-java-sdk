/*
 * API Settings
 * At BlueSnap, we look at payments a little differently. Our Payment Orchestration Platform helps businesses accept payments globally and is designed to increase revenue and reduces costs. We provide a comprehensive back-end solutions that simplifies the complexity of payments, managing the full process from start to finish.  BlueSnap supports payments through multiple sales channels such as online and mobile sales, marketplaces, subscriptions, invoice payments and manual orders through a virtual terminal. And for businesses looking for embedded payments, we offer white-labeled payments for platforms with automated underwriting and onboarding that supports marketplaces and split payments.  And with one integration and contract, businesses can sell in over 200 geographies with access to local acquiring in 47 countries, 110+ currencies and 100+ global payment types, including popular eWallets, automated accounts receivable, world-class fraud protection and chargeback management, built-in solutions for regulation and tax compliance, and unified global reporting to help businesses grow.  With a US headquarters in Waltham, MA, and EU headquarters in Dublin, Ireland, BlueSnap is backed by world-class private equity investors including Great Hill Partners and Parthenon Capital Partners.   Learn more at BlueSnap.com
 *
 * The version of the OpenAPI document: 8976-Tools
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * VendorUpdateVendorRequestPayoutInfoInner
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class VendorUpdateVendorRequestPayoutInfoInner {
  public static final String SERIALIZED_NAME_PAYOUT_TYPE = "payoutType";
  @SerializedName(SERIALIZED_NAME_PAYOUT_TYPE)
  private String payoutType = "ACH";

  public static final String SERIALIZED_NAME_BASE_CURRENCY = "baseCurrency";
  @SerializedName(SERIALIZED_NAME_BASE_CURRENCY)
  private String baseCurrency = "USD";

  public static final String SERIALIZED_NAME_NAME_ON_ACCOUNT = "nameOnAccount";
  @SerializedName(SERIALIZED_NAME_NAME_ON_ACCOUNT)
  private String nameOnAccount = "vendor";

  public static final String SERIALIZED_NAME_BANK_ACCOUNT_CLASS = "bankAccountClass";
  @SerializedName(SERIALIZED_NAME_BANK_ACCOUNT_CLASS)
  private String bankAccountClass = "PERSONAL";

  public static final String SERIALIZED_NAME_BANK_ACCOUNT_TYPE = "bankAccountType";
  @SerializedName(SERIALIZED_NAME_BANK_ACCOUNT_TYPE)
  private String bankAccountType = "CHECKING";

  public static final String SERIALIZED_NAME_BANK_NAME = "bankName";
  @SerializedName(SERIALIZED_NAME_BANK_NAME)
  private String bankName = "Leumi";

  public static final String SERIALIZED_NAME_BANK_ID = "bankId";
  @SerializedName(SERIALIZED_NAME_BANK_ID)
  private String bankId = "123456789";

  public static final String SERIALIZED_NAME_COUNTRY = "country";
  @SerializedName(SERIALIZED_NAME_COUNTRY)
  private String country = "US";

  public static final String SERIALIZED_NAME_CITY = "city";
  @SerializedName(SERIALIZED_NAME_CITY)
  private String city = "Portland";

  public static final String SERIALIZED_NAME_ADDRESS = "address";
  @SerializedName(SERIALIZED_NAME_ADDRESS)
  private String address = "1 bank address";

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private String state = "MA";

  public static final String SERIALIZED_NAME_ZIP = "zip";
  @SerializedName(SERIALIZED_NAME_ZIP)
  private String zip = "02453";

  public static final String SERIALIZED_NAME_BANK_ACCOUNT_ID = "bankAccountId";
  @SerializedName(SERIALIZED_NAME_BANK_ACCOUNT_ID)
  private String bankAccountId = "123456789";

  public static final String SERIALIZED_NAME_MINIMAL_PAYOUT_AMOUNT = "minimalPayoutAmount";
  @SerializedName(SERIALIZED_NAME_MINIMAL_PAYOUT_AMOUNT)
  private Integer minimalPayoutAmount = 50;

  public static final String SERIALIZED_NAME_PAYMENT_REFERENCE = "paymentReference";
  @SerializedName(SERIALIZED_NAME_PAYMENT_REFERENCE)
  private String paymentReference = "Payment for vendor 1234";

  public static final String SERIALIZED_NAME_REFUND_RESERVE = "refundReserve";
  @SerializedName(SERIALIZED_NAME_REFUND_RESERVE)
  private Integer refundReserve = 200;

  public VendorUpdateVendorRequestPayoutInfoInner() {
  }

  public VendorUpdateVendorRequestPayoutInfoInner payoutType(String payoutType) {
    
    
    
    
    this.payoutType = payoutType;
    return this;
  }

   /**
   * Get payoutType
   * @return payoutType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "ACH", value = "")

  public String getPayoutType() {
    return payoutType;
  }


  public void setPayoutType(String payoutType) {
    
    
    
    this.payoutType = payoutType;
  }


  public VendorUpdateVendorRequestPayoutInfoInner baseCurrency(String baseCurrency) {
    
    
    
    
    this.baseCurrency = baseCurrency;
    return this;
  }

   /**
   * Get baseCurrency
   * @return baseCurrency
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "USD", value = "")

  public String getBaseCurrency() {
    return baseCurrency;
  }


  public void setBaseCurrency(String baseCurrency) {
    
    
    
    this.baseCurrency = baseCurrency;
  }


  public VendorUpdateVendorRequestPayoutInfoInner nameOnAccount(String nameOnAccount) {
    
    
    
    
    this.nameOnAccount = nameOnAccount;
    return this;
  }

   /**
   * Get nameOnAccount
   * @return nameOnAccount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "vendor", value = "")

  public String getNameOnAccount() {
    return nameOnAccount;
  }


  public void setNameOnAccount(String nameOnAccount) {
    
    
    
    this.nameOnAccount = nameOnAccount;
  }


  public VendorUpdateVendorRequestPayoutInfoInner bankAccountClass(String bankAccountClass) {
    
    
    
    
    this.bankAccountClass = bankAccountClass;
    return this;
  }

   /**
   * Get bankAccountClass
   * @return bankAccountClass
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "PERSONAL", value = "")

  public String getBankAccountClass() {
    return bankAccountClass;
  }


  public void setBankAccountClass(String bankAccountClass) {
    
    
    
    this.bankAccountClass = bankAccountClass;
  }


  public VendorUpdateVendorRequestPayoutInfoInner bankAccountType(String bankAccountType) {
    
    
    
    
    this.bankAccountType = bankAccountType;
    return this;
  }

   /**
   * Get bankAccountType
   * @return bankAccountType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "CHECKING", value = "")

  public String getBankAccountType() {
    return bankAccountType;
  }


  public void setBankAccountType(String bankAccountType) {
    
    
    
    this.bankAccountType = bankAccountType;
  }


  public VendorUpdateVendorRequestPayoutInfoInner bankName(String bankName) {
    
    
    
    
    this.bankName = bankName;
    return this;
  }

   /**
   * Get bankName
   * @return bankName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Leumi", value = "")

  public String getBankName() {
    return bankName;
  }


  public void setBankName(String bankName) {
    
    
    
    this.bankName = bankName;
  }


  public VendorUpdateVendorRequestPayoutInfoInner bankId(String bankId) {
    
    
    
    
    this.bankId = bankId;
    return this;
  }

   /**
   * Get bankId
   * @return bankId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "123456789", value = "")

  public String getBankId() {
    return bankId;
  }


  public void setBankId(String bankId) {
    
    
    
    this.bankId = bankId;
  }


  public VendorUpdateVendorRequestPayoutInfoInner country(String country) {
    
    
    
    
    this.country = country;
    return this;
  }

   /**
   * Get country
   * @return country
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "US", value = "")

  public String getCountry() {
    return country;
  }


  public void setCountry(String country) {
    
    
    
    this.country = country;
  }


  public VendorUpdateVendorRequestPayoutInfoInner city(String city) {
    
    
    
    
    this.city = city;
    return this;
  }

   /**
   * Get city
   * @return city
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Portland", value = "")

  public String getCity() {
    return city;
  }


  public void setCity(String city) {
    
    
    
    this.city = city;
  }


  public VendorUpdateVendorRequestPayoutInfoInner address(String address) {
    
    
    
    
    this.address = address;
    return this;
  }

   /**
   * Get address
   * @return address
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "1 bank address", value = "")

  public String getAddress() {
    return address;
  }


  public void setAddress(String address) {
    
    
    
    this.address = address;
  }


  public VendorUpdateVendorRequestPayoutInfoInner state(String state) {
    
    
    
    
    this.state = state;
    return this;
  }

   /**
   * Get state
   * @return state
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "MA", value = "")

  public String getState() {
    return state;
  }


  public void setState(String state) {
    
    
    
    this.state = state;
  }


  public VendorUpdateVendorRequestPayoutInfoInner zip(String zip) {
    
    
    
    
    this.zip = zip;
    return this;
  }

   /**
   * Get zip
   * @return zip
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "02453", value = "")

  public String getZip() {
    return zip;
  }


  public void setZip(String zip) {
    
    
    
    this.zip = zip;
  }


  public VendorUpdateVendorRequestPayoutInfoInner bankAccountId(String bankAccountId) {
    
    
    
    
    this.bankAccountId = bankAccountId;
    return this;
  }

   /**
   * Get bankAccountId
   * @return bankAccountId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "123456789", value = "")

  public String getBankAccountId() {
    return bankAccountId;
  }


  public void setBankAccountId(String bankAccountId) {
    
    
    
    this.bankAccountId = bankAccountId;
  }


  public VendorUpdateVendorRequestPayoutInfoInner minimalPayoutAmount(Integer minimalPayoutAmount) {
    
    
    
    
    this.minimalPayoutAmount = minimalPayoutAmount;
    return this;
  }

   /**
   * Get minimalPayoutAmount
   * @return minimalPayoutAmount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "50", value = "")

  public Integer getMinimalPayoutAmount() {
    return minimalPayoutAmount;
  }


  public void setMinimalPayoutAmount(Integer minimalPayoutAmount) {
    
    
    
    this.minimalPayoutAmount = minimalPayoutAmount;
  }


  public VendorUpdateVendorRequestPayoutInfoInner paymentReference(String paymentReference) {
    
    
    
    
    this.paymentReference = paymentReference;
    return this;
  }

   /**
   * Get paymentReference
   * @return paymentReference
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Payment for vendor 1234", value = "")

  public String getPaymentReference() {
    return paymentReference;
  }


  public void setPaymentReference(String paymentReference) {
    
    
    
    this.paymentReference = paymentReference;
  }


  public VendorUpdateVendorRequestPayoutInfoInner refundReserve(Integer refundReserve) {
    
    
    
    
    this.refundReserve = refundReserve;
    return this;
  }

   /**
   * Get refundReserve
   * @return refundReserve
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "200", value = "")

  public Integer getRefundReserve() {
    return refundReserve;
  }


  public void setRefundReserve(Integer refundReserve) {
    
    
    
    this.refundReserve = refundReserve;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the VendorUpdateVendorRequestPayoutInfoInner instance itself
   */
  public VendorUpdateVendorRequestPayoutInfoInner putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VendorUpdateVendorRequestPayoutInfoInner vendorUpdateVendorRequestPayoutInfoInner = (VendorUpdateVendorRequestPayoutInfoInner) o;
    return Objects.equals(this.payoutType, vendorUpdateVendorRequestPayoutInfoInner.payoutType) &&
        Objects.equals(this.baseCurrency, vendorUpdateVendorRequestPayoutInfoInner.baseCurrency) &&
        Objects.equals(this.nameOnAccount, vendorUpdateVendorRequestPayoutInfoInner.nameOnAccount) &&
        Objects.equals(this.bankAccountClass, vendorUpdateVendorRequestPayoutInfoInner.bankAccountClass) &&
        Objects.equals(this.bankAccountType, vendorUpdateVendorRequestPayoutInfoInner.bankAccountType) &&
        Objects.equals(this.bankName, vendorUpdateVendorRequestPayoutInfoInner.bankName) &&
        Objects.equals(this.bankId, vendorUpdateVendorRequestPayoutInfoInner.bankId) &&
        Objects.equals(this.country, vendorUpdateVendorRequestPayoutInfoInner.country) &&
        Objects.equals(this.city, vendorUpdateVendorRequestPayoutInfoInner.city) &&
        Objects.equals(this.address, vendorUpdateVendorRequestPayoutInfoInner.address) &&
        Objects.equals(this.state, vendorUpdateVendorRequestPayoutInfoInner.state) &&
        Objects.equals(this.zip, vendorUpdateVendorRequestPayoutInfoInner.zip) &&
        Objects.equals(this.bankAccountId, vendorUpdateVendorRequestPayoutInfoInner.bankAccountId) &&
        Objects.equals(this.minimalPayoutAmount, vendorUpdateVendorRequestPayoutInfoInner.minimalPayoutAmount) &&
        Objects.equals(this.paymentReference, vendorUpdateVendorRequestPayoutInfoInner.paymentReference) &&
        Objects.equals(this.refundReserve, vendorUpdateVendorRequestPayoutInfoInner.refundReserve)&&
        Objects.equals(this.additionalProperties, vendorUpdateVendorRequestPayoutInfoInner.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(payoutType, baseCurrency, nameOnAccount, bankAccountClass, bankAccountType, bankName, bankId, country, city, address, state, zip, bankAccountId, minimalPayoutAmount, paymentReference, refundReserve, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VendorUpdateVendorRequestPayoutInfoInner {\n");
    sb.append("    payoutType: ").append(toIndentedString(payoutType)).append("\n");
    sb.append("    baseCurrency: ").append(toIndentedString(baseCurrency)).append("\n");
    sb.append("    nameOnAccount: ").append(toIndentedString(nameOnAccount)).append("\n");
    sb.append("    bankAccountClass: ").append(toIndentedString(bankAccountClass)).append("\n");
    sb.append("    bankAccountType: ").append(toIndentedString(bankAccountType)).append("\n");
    sb.append("    bankName: ").append(toIndentedString(bankName)).append("\n");
    sb.append("    bankId: ").append(toIndentedString(bankId)).append("\n");
    sb.append("    country: ").append(toIndentedString(country)).append("\n");
    sb.append("    city: ").append(toIndentedString(city)).append("\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    zip: ").append(toIndentedString(zip)).append("\n");
    sb.append("    bankAccountId: ").append(toIndentedString(bankAccountId)).append("\n");
    sb.append("    minimalPayoutAmount: ").append(toIndentedString(minimalPayoutAmount)).append("\n");
    sb.append("    paymentReference: ").append(toIndentedString(paymentReference)).append("\n");
    sb.append("    refundReserve: ").append(toIndentedString(refundReserve)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("payoutType");
    openapiFields.add("baseCurrency");
    openapiFields.add("nameOnAccount");
    openapiFields.add("bankAccountClass");
    openapiFields.add("bankAccountType");
    openapiFields.add("bankName");
    openapiFields.add("bankId");
    openapiFields.add("country");
    openapiFields.add("city");
    openapiFields.add("address");
    openapiFields.add("state");
    openapiFields.add("zip");
    openapiFields.add("bankAccountId");
    openapiFields.add("minimalPayoutAmount");
    openapiFields.add("paymentReference");
    openapiFields.add("refundReserve");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to VendorUpdateVendorRequestPayoutInfoInner
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!VendorUpdateVendorRequestPayoutInfoInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in VendorUpdateVendorRequestPayoutInfoInner is not found in the empty JSON string", VendorUpdateVendorRequestPayoutInfoInner.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("payoutType") != null && !jsonObj.get("payoutType").isJsonNull()) && !jsonObj.get("payoutType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `payoutType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("payoutType").toString()));
      }
      if ((jsonObj.get("baseCurrency") != null && !jsonObj.get("baseCurrency").isJsonNull()) && !jsonObj.get("baseCurrency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `baseCurrency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("baseCurrency").toString()));
      }
      if ((jsonObj.get("nameOnAccount") != null && !jsonObj.get("nameOnAccount").isJsonNull()) && !jsonObj.get("nameOnAccount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nameOnAccount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nameOnAccount").toString()));
      }
      if ((jsonObj.get("bankAccountClass") != null && !jsonObj.get("bankAccountClass").isJsonNull()) && !jsonObj.get("bankAccountClass").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bankAccountClass` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bankAccountClass").toString()));
      }
      if ((jsonObj.get("bankAccountType") != null && !jsonObj.get("bankAccountType").isJsonNull()) && !jsonObj.get("bankAccountType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bankAccountType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bankAccountType").toString()));
      }
      if ((jsonObj.get("bankName") != null && !jsonObj.get("bankName").isJsonNull()) && !jsonObj.get("bankName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bankName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bankName").toString()));
      }
      if ((jsonObj.get("bankId") != null && !jsonObj.get("bankId").isJsonNull()) && !jsonObj.get("bankId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bankId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bankId").toString()));
      }
      if ((jsonObj.get("country") != null && !jsonObj.get("country").isJsonNull()) && !jsonObj.get("country").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `country` to be a primitive type in the JSON string but got `%s`", jsonObj.get("country").toString()));
      }
      if ((jsonObj.get("city") != null && !jsonObj.get("city").isJsonNull()) && !jsonObj.get("city").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `city` to be a primitive type in the JSON string but got `%s`", jsonObj.get("city").toString()));
      }
      if ((jsonObj.get("address") != null && !jsonObj.get("address").isJsonNull()) && !jsonObj.get("address").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `address` to be a primitive type in the JSON string but got `%s`", jsonObj.get("address").toString()));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      if ((jsonObj.get("zip") != null && !jsonObj.get("zip").isJsonNull()) && !jsonObj.get("zip").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `zip` to be a primitive type in the JSON string but got `%s`", jsonObj.get("zip").toString()));
      }
      if ((jsonObj.get("bankAccountId") != null && !jsonObj.get("bankAccountId").isJsonNull()) && !jsonObj.get("bankAccountId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bankAccountId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bankAccountId").toString()));
      }
      if ((jsonObj.get("paymentReference") != null && !jsonObj.get("paymentReference").isJsonNull()) && !jsonObj.get("paymentReference").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `paymentReference` to be a primitive type in the JSON string but got `%s`", jsonObj.get("paymentReference").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!VendorUpdateVendorRequestPayoutInfoInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'VendorUpdateVendorRequestPayoutInfoInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<VendorUpdateVendorRequestPayoutInfoInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(VendorUpdateVendorRequestPayoutInfoInner.class));

       return (TypeAdapter<T>) new TypeAdapter<VendorUpdateVendorRequestPayoutInfoInner>() {
           @Override
           public void write(JsonWriter out, VendorUpdateVendorRequestPayoutInfoInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public VendorUpdateVendorRequestPayoutInfoInner read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             VendorUpdateVendorRequestPayoutInfoInner instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of VendorUpdateVendorRequestPayoutInfoInner given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of VendorUpdateVendorRequestPayoutInfoInner
  * @throws IOException if the JSON string is invalid with respect to VendorUpdateVendorRequestPayoutInfoInner
  */
  public static VendorUpdateVendorRequestPayoutInfoInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, VendorUpdateVendorRequestPayoutInfoInner.class);
  }

 /**
  * Convert an instance of VendorUpdateVendorRequestPayoutInfoInner to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

