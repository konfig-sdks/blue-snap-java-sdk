/*
 * API Settings
 * At BlueSnap, we look at payments a little differently. Our Payment Orchestration Platform helps businesses accept payments globally and is designed to increase revenue and reduces costs. We provide a comprehensive back-end solutions that simplifies the complexity of payments, managing the full process from start to finish.  BlueSnap supports payments through multiple sales channels such as online and mobile sales, marketplaces, subscriptions, invoice payments and manual orders through a virtual terminal. And for businesses looking for embedded payments, we offer white-labeled payments for platforms with automated underwriting and onboarding that supports marketplaces and split payments.  And with one integration and contract, businesses can sell in over 200 geographies with access to local acquiring in 47 countries, 110+ currencies and 100+ global payment types, including popular eWallets, automated accounts receivable, world-class fraud protection and chargeback management, built-in solutions for regulation and tax compliance, and unified global reporting to help businesses grow.  With a US headquarters in Waltham, MA, and EU headquarters in Dublin, Ireland, BlueSnap is backed by world-class private equity investors including Great Hill Partners and Parthenon Capital Partners.   Learn more at BlueSnap.com
 *
 * The version of the OpenAPI document: 8976-Tools
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.VendorUpdateVendorRequestPayoutInfoInner;
import com.konfigthis.client.model.VendorUpdateVendorRequestVendorAgreement;
import com.konfigthis.client.model.VendorUpdateVendorRequestVendorPrincipal;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * VendorUpdateVendorRequest
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class VendorUpdateVendorRequest {
  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private String email = "vendor@bluesnap.com";

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name = "Important Vendor";

  public static final String SERIALIZED_NAME_FIRST_NAME = "firstName";
  @SerializedName(SERIALIZED_NAME_FIRST_NAME)
  private String firstName = "Joe";

  public static final String SERIALIZED_NAME_LAST_NAME = "lastName";
  @SerializedName(SERIALIZED_NAME_LAST_NAME)
  private String lastName = "Smith";

  public static final String SERIALIZED_NAME_ADDRESS = "address";
  @SerializedName(SERIALIZED_NAME_ADDRESS)
  private String address = "123 Main Street";

  public static final String SERIALIZED_NAME_CITY = "city";
  @SerializedName(SERIALIZED_NAME_CITY)
  private String city = "testing city";

  public static final String SERIALIZED_NAME_ZIP = "zip";
  @SerializedName(SERIALIZED_NAME_ZIP)
  private String zip = "02453";

  public static final String SERIALIZED_NAME_COUNTRY = "country";
  @SerializedName(SERIALIZED_NAME_COUNTRY)
  private String country = "US";

  public static final String SERIALIZED_NAME_PHONE = "phone";
  @SerializedName(SERIALIZED_NAME_PHONE)
  private String phone = "1-054-976-6778";

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private String state = "MA";

  public static final String SERIALIZED_NAME_TAX_ID = "taxId";
  @SerializedName(SERIALIZED_NAME_TAX_ID)
  private Integer taxId = 123456789;

  public static final String SERIALIZED_NAME_VENDOR_URL = "vendorUrl";
  @SerializedName(SERIALIZED_NAME_VENDOR_URL)
  private String vendorUrl = "http://mycompany.com";

  public static final String SERIALIZED_NAME_IPN_URL = "ipnUrl";
  @SerializedName(SERIALIZED_NAME_IPN_URL)
  private String ipnUrl = "https://ipnaddress.com";

  public static final String SERIALIZED_NAME_DEFAULT_PAYOUT_CURRENCY = "defaultPayoutCurrency";
  @SerializedName(SERIALIZED_NAME_DEFAULT_PAYOUT_CURRENCY)
  private String defaultPayoutCurrency = "USD";

  public static final String SERIALIZED_NAME_VENDOR_PRINCIPAL = "vendorPrincipal";
  @SerializedName(SERIALIZED_NAME_VENDOR_PRINCIPAL)
  private VendorUpdateVendorRequestVendorPrincipal vendorPrincipal;

  public static final String SERIALIZED_NAME_PAYOUT_INFO = "payoutInfo";
  @SerializedName(SERIALIZED_NAME_PAYOUT_INFO)
  private List<VendorUpdateVendorRequestPayoutInfoInner> payoutInfo = null;

  public static final String SERIALIZED_NAME_VENDOR_AGREEMENT = "vendorAgreement";
  @SerializedName(SERIALIZED_NAME_VENDOR_AGREEMENT)
  private VendorUpdateVendorRequestVendorAgreement vendorAgreement;

  public VendorUpdateVendorRequest() {
  }

  public VendorUpdateVendorRequest email(String email) {
    
    
    
    
    this.email = email;
    return this;
  }

   /**
   * Get email
   * @return email
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "vendor@bluesnap.com", value = "")

  public String getEmail() {
    return email;
  }


  public void setEmail(String email) {
    
    
    
    this.email = email;
  }


  public VendorUpdateVendorRequest name(String name) {
    
    
    
    
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Important Vendor", value = "")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    
    
    
    this.name = name;
  }


  public VendorUpdateVendorRequest firstName(String firstName) {
    
    
    
    
    this.firstName = firstName;
    return this;
  }

   /**
   * Get firstName
   * @return firstName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Joe", value = "")

  public String getFirstName() {
    return firstName;
  }


  public void setFirstName(String firstName) {
    
    
    
    this.firstName = firstName;
  }


  public VendorUpdateVendorRequest lastName(String lastName) {
    
    
    
    
    this.lastName = lastName;
    return this;
  }

   /**
   * Get lastName
   * @return lastName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Smith", value = "")

  public String getLastName() {
    return lastName;
  }


  public void setLastName(String lastName) {
    
    
    
    this.lastName = lastName;
  }


  public VendorUpdateVendorRequest address(String address) {
    
    
    
    
    this.address = address;
    return this;
  }

   /**
   * Get address
   * @return address
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "123 Main Street", value = "")

  public String getAddress() {
    return address;
  }


  public void setAddress(String address) {
    
    
    
    this.address = address;
  }


  public VendorUpdateVendorRequest city(String city) {
    
    
    
    
    this.city = city;
    return this;
  }

   /**
   * Get city
   * @return city
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "testing city", value = "")

  public String getCity() {
    return city;
  }


  public void setCity(String city) {
    
    
    
    this.city = city;
  }


  public VendorUpdateVendorRequest zip(String zip) {
    
    
    
    
    this.zip = zip;
    return this;
  }

   /**
   * Get zip
   * @return zip
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "02453", value = "")

  public String getZip() {
    return zip;
  }


  public void setZip(String zip) {
    
    
    
    this.zip = zip;
  }


  public VendorUpdateVendorRequest country(String country) {
    
    
    
    
    this.country = country;
    return this;
  }

   /**
   * Get country
   * @return country
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "US", value = "")

  public String getCountry() {
    return country;
  }


  public void setCountry(String country) {
    
    
    
    this.country = country;
  }


  public VendorUpdateVendorRequest phone(String phone) {
    
    
    
    
    this.phone = phone;
    return this;
  }

   /**
   * Get phone
   * @return phone
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "1-054-976-6778", value = "")

  public String getPhone() {
    return phone;
  }


  public void setPhone(String phone) {
    
    
    
    this.phone = phone;
  }


  public VendorUpdateVendorRequest state(String state) {
    
    
    
    
    this.state = state;
    return this;
  }

   /**
   * Get state
   * @return state
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "MA", value = "")

  public String getState() {
    return state;
  }


  public void setState(String state) {
    
    
    
    this.state = state;
  }


  public VendorUpdateVendorRequest taxId(Integer taxId) {
    
    
    
    
    this.taxId = taxId;
    return this;
  }

   /**
   * Get taxId
   * @return taxId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "123456789", value = "")

  public Integer getTaxId() {
    return taxId;
  }


  public void setTaxId(Integer taxId) {
    
    
    
    this.taxId = taxId;
  }


  public VendorUpdateVendorRequest vendorUrl(String vendorUrl) {
    
    
    
    
    this.vendorUrl = vendorUrl;
    return this;
  }

   /**
   * Get vendorUrl
   * @return vendorUrl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "http://mycompany.com", value = "")

  public String getVendorUrl() {
    return vendorUrl;
  }


  public void setVendorUrl(String vendorUrl) {
    
    
    
    this.vendorUrl = vendorUrl;
  }


  public VendorUpdateVendorRequest ipnUrl(String ipnUrl) {
    
    
    
    
    this.ipnUrl = ipnUrl;
    return this;
  }

   /**
   * Get ipnUrl
   * @return ipnUrl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "https://ipnaddress.com", value = "")

  public String getIpnUrl() {
    return ipnUrl;
  }


  public void setIpnUrl(String ipnUrl) {
    
    
    
    this.ipnUrl = ipnUrl;
  }


  public VendorUpdateVendorRequest defaultPayoutCurrency(String defaultPayoutCurrency) {
    
    
    
    
    this.defaultPayoutCurrency = defaultPayoutCurrency;
    return this;
  }

   /**
   * Get defaultPayoutCurrency
   * @return defaultPayoutCurrency
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "USD", value = "")

  public String getDefaultPayoutCurrency() {
    return defaultPayoutCurrency;
  }


  public void setDefaultPayoutCurrency(String defaultPayoutCurrency) {
    
    
    
    this.defaultPayoutCurrency = defaultPayoutCurrency;
  }


  public VendorUpdateVendorRequest vendorPrincipal(VendorUpdateVendorRequestVendorPrincipal vendorPrincipal) {
    
    
    
    
    this.vendorPrincipal = vendorPrincipal;
    return this;
  }

   /**
   * Get vendorPrincipal
   * @return vendorPrincipal
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public VendorUpdateVendorRequestVendorPrincipal getVendorPrincipal() {
    return vendorPrincipal;
  }


  public void setVendorPrincipal(VendorUpdateVendorRequestVendorPrincipal vendorPrincipal) {
    
    
    
    this.vendorPrincipal = vendorPrincipal;
  }


  public VendorUpdateVendorRequest payoutInfo(List<VendorUpdateVendorRequestPayoutInfoInner> payoutInfo) {
    
    
    
    
    this.payoutInfo = payoutInfo;
    return this;
  }

  public VendorUpdateVendorRequest addPayoutInfoItem(VendorUpdateVendorRequestPayoutInfoInner payoutInfoItem) {
    if (this.payoutInfo == null) {
      this.payoutInfo = new ArrayList<>();
    }
    this.payoutInfo.add(payoutInfoItem);
    return this;
  }

   /**
   * Get payoutInfo
   * @return payoutInfo
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<VendorUpdateVendorRequestPayoutInfoInner> getPayoutInfo() {
    return payoutInfo;
  }


  public void setPayoutInfo(List<VendorUpdateVendorRequestPayoutInfoInner> payoutInfo) {
    
    
    
    this.payoutInfo = payoutInfo;
  }


  public VendorUpdateVendorRequest vendorAgreement(VendorUpdateVendorRequestVendorAgreement vendorAgreement) {
    
    
    
    
    this.vendorAgreement = vendorAgreement;
    return this;
  }

   /**
   * Get vendorAgreement
   * @return vendorAgreement
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public VendorUpdateVendorRequestVendorAgreement getVendorAgreement() {
    return vendorAgreement;
  }


  public void setVendorAgreement(VendorUpdateVendorRequestVendorAgreement vendorAgreement) {
    
    
    
    this.vendorAgreement = vendorAgreement;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the VendorUpdateVendorRequest instance itself
   */
  public VendorUpdateVendorRequest putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VendorUpdateVendorRequest vendorUpdateVendorRequest = (VendorUpdateVendorRequest) o;
    return Objects.equals(this.email, vendorUpdateVendorRequest.email) &&
        Objects.equals(this.name, vendorUpdateVendorRequest.name) &&
        Objects.equals(this.firstName, vendorUpdateVendorRequest.firstName) &&
        Objects.equals(this.lastName, vendorUpdateVendorRequest.lastName) &&
        Objects.equals(this.address, vendorUpdateVendorRequest.address) &&
        Objects.equals(this.city, vendorUpdateVendorRequest.city) &&
        Objects.equals(this.zip, vendorUpdateVendorRequest.zip) &&
        Objects.equals(this.country, vendorUpdateVendorRequest.country) &&
        Objects.equals(this.phone, vendorUpdateVendorRequest.phone) &&
        Objects.equals(this.state, vendorUpdateVendorRequest.state) &&
        Objects.equals(this.taxId, vendorUpdateVendorRequest.taxId) &&
        Objects.equals(this.vendorUrl, vendorUpdateVendorRequest.vendorUrl) &&
        Objects.equals(this.ipnUrl, vendorUpdateVendorRequest.ipnUrl) &&
        Objects.equals(this.defaultPayoutCurrency, vendorUpdateVendorRequest.defaultPayoutCurrency) &&
        Objects.equals(this.vendorPrincipal, vendorUpdateVendorRequest.vendorPrincipal) &&
        Objects.equals(this.payoutInfo, vendorUpdateVendorRequest.payoutInfo) &&
        Objects.equals(this.vendorAgreement, vendorUpdateVendorRequest.vendorAgreement)&&
        Objects.equals(this.additionalProperties, vendorUpdateVendorRequest.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(email, name, firstName, lastName, address, city, zip, country, phone, state, taxId, vendorUrl, ipnUrl, defaultPayoutCurrency, vendorPrincipal, payoutInfo, vendorAgreement, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VendorUpdateVendorRequest {\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    firstName: ").append(toIndentedString(firstName)).append("\n");
    sb.append("    lastName: ").append(toIndentedString(lastName)).append("\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    city: ").append(toIndentedString(city)).append("\n");
    sb.append("    zip: ").append(toIndentedString(zip)).append("\n");
    sb.append("    country: ").append(toIndentedString(country)).append("\n");
    sb.append("    phone: ").append(toIndentedString(phone)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    taxId: ").append(toIndentedString(taxId)).append("\n");
    sb.append("    vendorUrl: ").append(toIndentedString(vendorUrl)).append("\n");
    sb.append("    ipnUrl: ").append(toIndentedString(ipnUrl)).append("\n");
    sb.append("    defaultPayoutCurrency: ").append(toIndentedString(defaultPayoutCurrency)).append("\n");
    sb.append("    vendorPrincipal: ").append(toIndentedString(vendorPrincipal)).append("\n");
    sb.append("    payoutInfo: ").append(toIndentedString(payoutInfo)).append("\n");
    sb.append("    vendorAgreement: ").append(toIndentedString(vendorAgreement)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("email");
    openapiFields.add("name");
    openapiFields.add("firstName");
    openapiFields.add("lastName");
    openapiFields.add("address");
    openapiFields.add("city");
    openapiFields.add("zip");
    openapiFields.add("country");
    openapiFields.add("phone");
    openapiFields.add("state");
    openapiFields.add("taxId");
    openapiFields.add("vendorUrl");
    openapiFields.add("ipnUrl");
    openapiFields.add("defaultPayoutCurrency");
    openapiFields.add("vendorPrincipal");
    openapiFields.add("payoutInfo");
    openapiFields.add("vendorAgreement");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to VendorUpdateVendorRequest
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!VendorUpdateVendorRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in VendorUpdateVendorRequest is not found in the empty JSON string", VendorUpdateVendorRequest.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("email") != null && !jsonObj.get("email").isJsonNull()) && !jsonObj.get("email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("firstName") != null && !jsonObj.get("firstName").isJsonNull()) && !jsonObj.get("firstName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `firstName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("firstName").toString()));
      }
      if ((jsonObj.get("lastName") != null && !jsonObj.get("lastName").isJsonNull()) && !jsonObj.get("lastName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastName").toString()));
      }
      if ((jsonObj.get("address") != null && !jsonObj.get("address").isJsonNull()) && !jsonObj.get("address").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `address` to be a primitive type in the JSON string but got `%s`", jsonObj.get("address").toString()));
      }
      if ((jsonObj.get("city") != null && !jsonObj.get("city").isJsonNull()) && !jsonObj.get("city").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `city` to be a primitive type in the JSON string but got `%s`", jsonObj.get("city").toString()));
      }
      if ((jsonObj.get("zip") != null && !jsonObj.get("zip").isJsonNull()) && !jsonObj.get("zip").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `zip` to be a primitive type in the JSON string but got `%s`", jsonObj.get("zip").toString()));
      }
      if ((jsonObj.get("country") != null && !jsonObj.get("country").isJsonNull()) && !jsonObj.get("country").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `country` to be a primitive type in the JSON string but got `%s`", jsonObj.get("country").toString()));
      }
      if ((jsonObj.get("phone") != null && !jsonObj.get("phone").isJsonNull()) && !jsonObj.get("phone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `phone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("phone").toString()));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      if ((jsonObj.get("vendorUrl") != null && !jsonObj.get("vendorUrl").isJsonNull()) && !jsonObj.get("vendorUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vendorUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vendorUrl").toString()));
      }
      if ((jsonObj.get("ipnUrl") != null && !jsonObj.get("ipnUrl").isJsonNull()) && !jsonObj.get("ipnUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ipnUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ipnUrl").toString()));
      }
      if ((jsonObj.get("defaultPayoutCurrency") != null && !jsonObj.get("defaultPayoutCurrency").isJsonNull()) && !jsonObj.get("defaultPayoutCurrency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `defaultPayoutCurrency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("defaultPayoutCurrency").toString()));
      }
      // validate the optional field `vendorPrincipal`
      if (jsonObj.get("vendorPrincipal") != null && !jsonObj.get("vendorPrincipal").isJsonNull()) {
        VendorUpdateVendorRequestVendorPrincipal.validateJsonObject(jsonObj.getAsJsonObject("vendorPrincipal"));
      }
      if (jsonObj.get("payoutInfo") != null && !jsonObj.get("payoutInfo").isJsonNull()) {
        JsonArray jsonArraypayoutInfo = jsonObj.getAsJsonArray("payoutInfo");
        if (jsonArraypayoutInfo != null) {
          // ensure the json data is an array
          if (!jsonObj.get("payoutInfo").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `payoutInfo` to be an array in the JSON string but got `%s`", jsonObj.get("payoutInfo").toString()));
          }

          // validate the optional field `payoutInfo` (array)
          for (int i = 0; i < jsonArraypayoutInfo.size(); i++) {
            VendorUpdateVendorRequestPayoutInfoInner.validateJsonObject(jsonArraypayoutInfo.get(i).getAsJsonObject());
          };
        }
      }
      // validate the optional field `vendorAgreement`
      if (jsonObj.get("vendorAgreement") != null && !jsonObj.get("vendorAgreement").isJsonNull()) {
        VendorUpdateVendorRequestVendorAgreement.validateJsonObject(jsonObj.getAsJsonObject("vendorAgreement"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!VendorUpdateVendorRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'VendorUpdateVendorRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<VendorUpdateVendorRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(VendorUpdateVendorRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<VendorUpdateVendorRequest>() {
           @Override
           public void write(JsonWriter out, VendorUpdateVendorRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public VendorUpdateVendorRequest read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             VendorUpdateVendorRequest instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of VendorUpdateVendorRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of VendorUpdateVendorRequest
  * @throws IOException if the JSON string is invalid with respect to VendorUpdateVendorRequest
  */
  public static VendorUpdateVendorRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, VendorUpdateVendorRequest.class);
  }

 /**
  * Convert an instance of VendorUpdateVendorRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

