/*
 * API Settings
 * At BlueSnap, we look at payments a little differently. Our Payment Orchestration Platform helps businesses accept payments globally and is designed to increase revenue and reduces costs. We provide a comprehensive back-end solutions that simplifies the complexity of payments, managing the full process from start to finish.  BlueSnap supports payments through multiple sales channels such as online and mobile sales, marketplaces, subscriptions, invoice payments and manual orders through a virtual terminal. And for businesses looking for embedded payments, we offer white-labeled payments for platforms with automated underwriting and onboarding that supports marketplaces and split payments.  And with one integration and contract, businesses can sell in over 200 geographies with access to local acquiring in 47 countries, 110+ currencies and 100+ global payment types, including popular eWallets, automated accounts receivable, world-class fraud protection and chargeback management, built-in solutions for regulation and tax compliance, and unified global reporting to help businesses grow.  With a US headquarters in Waltham, MA, and EU headquarters in Dublin, Ireland, BlueSnap is backed by world-class private equity investors including Great Hill Partners and Parthenon Capital Partners.   Learn more at BlueSnap.com
 *
 * The version of the OpenAPI document: 8976-Tools
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.TransactionCreateSofortTransactionRequestAcssDirectDebitTransaction;
import com.konfigthis.client.model.TransactionCreateSofortTransactionRequestBecsDirectDebitTransaction;
import com.konfigthis.client.model.TransactionCreateSofortTransactionRequestEcpTransaction;
import com.konfigthis.client.model.TransactionCreateSofortTransactionRequestIdealTransaction;
import com.konfigthis.client.model.TransactionCreateSofortTransactionRequestLocalBankTransferTransaction;
import com.konfigthis.client.model.TransactionCreateSofortTransactionRequestPayerInfo;
import com.konfigthis.client.model.TransactionCreateSofortTransactionRequestPaypalTransaction;
import com.konfigthis.client.model.TransactionCreateSofortTransactionRequestSepaDirectDebitTransaction;
import com.konfigthis.client.model.TransactionCreateSofortTransactionRequestSofortTransaction;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * TransactionCreateSofortTransactionRequest
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class TransactionCreateSofortTransactionRequest {
  public static final String SERIALIZED_NAME_ECP_TRANSACTION = "ecpTransaction";
  @SerializedName(SERIALIZED_NAME_ECP_TRANSACTION)
  private TransactionCreateSofortTransactionRequestEcpTransaction ecpTransaction;

  public static final String SERIALIZED_NAME_AMOUNT = "amount";
  @SerializedName(SERIALIZED_NAME_AMOUNT)
  private Float amount = 42f;

  public static final String SERIALIZED_NAME_PAYER_INFO = "payerInfo";
  @SerializedName(SERIALIZED_NAME_PAYER_INFO)
  private TransactionCreateSofortTransactionRequestPayerInfo payerInfo;

  public static final String SERIALIZED_NAME_SOFT_DESCRIPTOR = "softDescriptor";
  @SerializedName(SERIALIZED_NAME_SOFT_DESCRIPTOR)
  private String softDescriptor = "ABC COMPANY";

  public static final String SERIALIZED_NAME_CURRENCY = "currency";
  @SerializedName(SERIALIZED_NAME_CURRENCY)
  private String currency = "GBP";

  public static final String SERIALIZED_NAME_AUTHORIZED_BY_SHOPPER = "authorizedByShopper";
  @SerializedName(SERIALIZED_NAME_AUTHORIZED_BY_SHOPPER)
  private Boolean authorizedByShopper = true;

  public static final String SERIALIZED_NAME_BECS_DIRECT_DEBIT_TRANSACTION = "becsDirectDebitTransaction";
  @SerializedName(SERIALIZED_NAME_BECS_DIRECT_DEBIT_TRANSACTION)
  private TransactionCreateSofortTransactionRequestBecsDirectDebitTransaction becsDirectDebitTransaction;

  public static final String SERIALIZED_NAME_IDEAL_TRANSACTION = "idealTransaction";
  @SerializedName(SERIALIZED_NAME_IDEAL_TRANSACTION)
  private TransactionCreateSofortTransactionRequestIdealTransaction idealTransaction;

  public static final String SERIALIZED_NAME_LOCAL_BANK_TRANSFER_TRANSACTION = "localBankTransferTransaction";
  @SerializedName(SERIALIZED_NAME_LOCAL_BANK_TRANSFER_TRANSACTION)
  private TransactionCreateSofortTransactionRequestLocalBankTransferTransaction localBankTransferTransaction;

  public static final String SERIALIZED_NAME_PAYPAL_TRANSACTION = "paypalTransaction";
  @SerializedName(SERIALIZED_NAME_PAYPAL_TRANSACTION)
  private TransactionCreateSofortTransactionRequestPaypalTransaction paypalTransaction;

  public static final String SERIALIZED_NAME_ACSS_DIRECT_DEBIT_TRANSACTION = "acssDirectDebitTransaction";
  @SerializedName(SERIALIZED_NAME_ACSS_DIRECT_DEBIT_TRANSACTION)
  private TransactionCreateSofortTransactionRequestAcssDirectDebitTransaction acssDirectDebitTransaction;

  public static final String SERIALIZED_NAME_SEPA_DIRECT_DEBIT_TRANSACTION = "sepaDirectDebitTransaction";
  @SerializedName(SERIALIZED_NAME_SEPA_DIRECT_DEBIT_TRANSACTION)
  private TransactionCreateSofortTransactionRequestSepaDirectDebitTransaction sepaDirectDebitTransaction;

  public static final String SERIALIZED_NAME_SOFORT_TRANSACTION = "sofortTransaction";
  @SerializedName(SERIALIZED_NAME_SOFORT_TRANSACTION)
  private TransactionCreateSofortTransactionRequestSofortTransaction sofortTransaction;

  public TransactionCreateSofortTransactionRequest() {
  }

  public TransactionCreateSofortTransactionRequest ecpTransaction(TransactionCreateSofortTransactionRequestEcpTransaction ecpTransaction) {
    
    
    
    
    this.ecpTransaction = ecpTransaction;
    return this;
  }

   /**
   * Get ecpTransaction
   * @return ecpTransaction
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public TransactionCreateSofortTransactionRequestEcpTransaction getEcpTransaction() {
    return ecpTransaction;
  }


  public void setEcpTransaction(TransactionCreateSofortTransactionRequestEcpTransaction ecpTransaction) {
    
    
    
    this.ecpTransaction = ecpTransaction;
  }


  public TransactionCreateSofortTransactionRequest amount(Float amount) {
    
    
    
    
    this.amount = amount;
    return this;
  }

   /**
   * Get amount
   * @return amount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "42", value = "")

  public Float getAmount() {
    return amount;
  }


  public void setAmount(Float amount) {
    
    
    
    this.amount = amount;
  }


  public TransactionCreateSofortTransactionRequest payerInfo(TransactionCreateSofortTransactionRequestPayerInfo payerInfo) {
    
    
    
    
    this.payerInfo = payerInfo;
    return this;
  }

   /**
   * Get payerInfo
   * @return payerInfo
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public TransactionCreateSofortTransactionRequestPayerInfo getPayerInfo() {
    return payerInfo;
  }


  public void setPayerInfo(TransactionCreateSofortTransactionRequestPayerInfo payerInfo) {
    
    
    
    this.payerInfo = payerInfo;
  }


  public TransactionCreateSofortTransactionRequest softDescriptor(String softDescriptor) {
    
    
    
    
    this.softDescriptor = softDescriptor;
    return this;
  }

   /**
   * Get softDescriptor
   * @return softDescriptor
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "ABC COMPANY", value = "")

  public String getSoftDescriptor() {
    return softDescriptor;
  }


  public void setSoftDescriptor(String softDescriptor) {
    
    
    
    this.softDescriptor = softDescriptor;
  }


  public TransactionCreateSofortTransactionRequest currency(String currency) {
    
    
    
    
    this.currency = currency;
    return this;
  }

   /**
   * Get currency
   * @return currency
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "GBP", value = "")

  public String getCurrency() {
    return currency;
  }


  public void setCurrency(String currency) {
    
    
    
    this.currency = currency;
  }


  public TransactionCreateSofortTransactionRequest authorizedByShopper(Boolean authorizedByShopper) {
    
    
    
    
    this.authorizedByShopper = authorizedByShopper;
    return this;
  }

   /**
   * Get authorizedByShopper
   * @return authorizedByShopper
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "")

  public Boolean getAuthorizedByShopper() {
    return authorizedByShopper;
  }


  public void setAuthorizedByShopper(Boolean authorizedByShopper) {
    
    
    
    this.authorizedByShopper = authorizedByShopper;
  }


  public TransactionCreateSofortTransactionRequest becsDirectDebitTransaction(TransactionCreateSofortTransactionRequestBecsDirectDebitTransaction becsDirectDebitTransaction) {
    
    
    
    
    this.becsDirectDebitTransaction = becsDirectDebitTransaction;
    return this;
  }

   /**
   * Get becsDirectDebitTransaction
   * @return becsDirectDebitTransaction
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public TransactionCreateSofortTransactionRequestBecsDirectDebitTransaction getBecsDirectDebitTransaction() {
    return becsDirectDebitTransaction;
  }


  public void setBecsDirectDebitTransaction(TransactionCreateSofortTransactionRequestBecsDirectDebitTransaction becsDirectDebitTransaction) {
    
    
    
    this.becsDirectDebitTransaction = becsDirectDebitTransaction;
  }


  public TransactionCreateSofortTransactionRequest idealTransaction(TransactionCreateSofortTransactionRequestIdealTransaction idealTransaction) {
    
    
    
    
    this.idealTransaction = idealTransaction;
    return this;
  }

   /**
   * Get idealTransaction
   * @return idealTransaction
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public TransactionCreateSofortTransactionRequestIdealTransaction getIdealTransaction() {
    return idealTransaction;
  }


  public void setIdealTransaction(TransactionCreateSofortTransactionRequestIdealTransaction idealTransaction) {
    
    
    
    this.idealTransaction = idealTransaction;
  }


  public TransactionCreateSofortTransactionRequest localBankTransferTransaction(TransactionCreateSofortTransactionRequestLocalBankTransferTransaction localBankTransferTransaction) {
    
    
    
    
    this.localBankTransferTransaction = localBankTransferTransaction;
    return this;
  }

   /**
   * Get localBankTransferTransaction
   * @return localBankTransferTransaction
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public TransactionCreateSofortTransactionRequestLocalBankTransferTransaction getLocalBankTransferTransaction() {
    return localBankTransferTransaction;
  }


  public void setLocalBankTransferTransaction(TransactionCreateSofortTransactionRequestLocalBankTransferTransaction localBankTransferTransaction) {
    
    
    
    this.localBankTransferTransaction = localBankTransferTransaction;
  }


  public TransactionCreateSofortTransactionRequest paypalTransaction(TransactionCreateSofortTransactionRequestPaypalTransaction paypalTransaction) {
    
    
    
    
    this.paypalTransaction = paypalTransaction;
    return this;
  }

   /**
   * Get paypalTransaction
   * @return paypalTransaction
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public TransactionCreateSofortTransactionRequestPaypalTransaction getPaypalTransaction() {
    return paypalTransaction;
  }


  public void setPaypalTransaction(TransactionCreateSofortTransactionRequestPaypalTransaction paypalTransaction) {
    
    
    
    this.paypalTransaction = paypalTransaction;
  }


  public TransactionCreateSofortTransactionRequest acssDirectDebitTransaction(TransactionCreateSofortTransactionRequestAcssDirectDebitTransaction acssDirectDebitTransaction) {
    
    
    
    
    this.acssDirectDebitTransaction = acssDirectDebitTransaction;
    return this;
  }

   /**
   * Get acssDirectDebitTransaction
   * @return acssDirectDebitTransaction
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public TransactionCreateSofortTransactionRequestAcssDirectDebitTransaction getAcssDirectDebitTransaction() {
    return acssDirectDebitTransaction;
  }


  public void setAcssDirectDebitTransaction(TransactionCreateSofortTransactionRequestAcssDirectDebitTransaction acssDirectDebitTransaction) {
    
    
    
    this.acssDirectDebitTransaction = acssDirectDebitTransaction;
  }


  public TransactionCreateSofortTransactionRequest sepaDirectDebitTransaction(TransactionCreateSofortTransactionRequestSepaDirectDebitTransaction sepaDirectDebitTransaction) {
    
    
    
    
    this.sepaDirectDebitTransaction = sepaDirectDebitTransaction;
    return this;
  }

   /**
   * Get sepaDirectDebitTransaction
   * @return sepaDirectDebitTransaction
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public TransactionCreateSofortTransactionRequestSepaDirectDebitTransaction getSepaDirectDebitTransaction() {
    return sepaDirectDebitTransaction;
  }


  public void setSepaDirectDebitTransaction(TransactionCreateSofortTransactionRequestSepaDirectDebitTransaction sepaDirectDebitTransaction) {
    
    
    
    this.sepaDirectDebitTransaction = sepaDirectDebitTransaction;
  }


  public TransactionCreateSofortTransactionRequest sofortTransaction(TransactionCreateSofortTransactionRequestSofortTransaction sofortTransaction) {
    
    
    
    
    this.sofortTransaction = sofortTransaction;
    return this;
  }

   /**
   * Get sofortTransaction
   * @return sofortTransaction
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public TransactionCreateSofortTransactionRequestSofortTransaction getSofortTransaction() {
    return sofortTransaction;
  }


  public void setSofortTransaction(TransactionCreateSofortTransactionRequestSofortTransaction sofortTransaction) {
    
    
    
    this.sofortTransaction = sofortTransaction;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the TransactionCreateSofortTransactionRequest instance itself
   */
  public TransactionCreateSofortTransactionRequest putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TransactionCreateSofortTransactionRequest transactionCreateSofortTransactionRequest = (TransactionCreateSofortTransactionRequest) o;
    return Objects.equals(this.ecpTransaction, transactionCreateSofortTransactionRequest.ecpTransaction) &&
        Objects.equals(this.amount, transactionCreateSofortTransactionRequest.amount) &&
        Objects.equals(this.payerInfo, transactionCreateSofortTransactionRequest.payerInfo) &&
        Objects.equals(this.softDescriptor, transactionCreateSofortTransactionRequest.softDescriptor) &&
        Objects.equals(this.currency, transactionCreateSofortTransactionRequest.currency) &&
        Objects.equals(this.authorizedByShopper, transactionCreateSofortTransactionRequest.authorizedByShopper) &&
        Objects.equals(this.becsDirectDebitTransaction, transactionCreateSofortTransactionRequest.becsDirectDebitTransaction) &&
        Objects.equals(this.idealTransaction, transactionCreateSofortTransactionRequest.idealTransaction) &&
        Objects.equals(this.localBankTransferTransaction, transactionCreateSofortTransactionRequest.localBankTransferTransaction) &&
        Objects.equals(this.paypalTransaction, transactionCreateSofortTransactionRequest.paypalTransaction) &&
        Objects.equals(this.acssDirectDebitTransaction, transactionCreateSofortTransactionRequest.acssDirectDebitTransaction) &&
        Objects.equals(this.sepaDirectDebitTransaction, transactionCreateSofortTransactionRequest.sepaDirectDebitTransaction) &&
        Objects.equals(this.sofortTransaction, transactionCreateSofortTransactionRequest.sofortTransaction)&&
        Objects.equals(this.additionalProperties, transactionCreateSofortTransactionRequest.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(ecpTransaction, amount, payerInfo, softDescriptor, currency, authorizedByShopper, becsDirectDebitTransaction, idealTransaction, localBankTransferTransaction, paypalTransaction, acssDirectDebitTransaction, sepaDirectDebitTransaction, sofortTransaction, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TransactionCreateSofortTransactionRequest {\n");
    sb.append("    ecpTransaction: ").append(toIndentedString(ecpTransaction)).append("\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    payerInfo: ").append(toIndentedString(payerInfo)).append("\n");
    sb.append("    softDescriptor: ").append(toIndentedString(softDescriptor)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    authorizedByShopper: ").append(toIndentedString(authorizedByShopper)).append("\n");
    sb.append("    becsDirectDebitTransaction: ").append(toIndentedString(becsDirectDebitTransaction)).append("\n");
    sb.append("    idealTransaction: ").append(toIndentedString(idealTransaction)).append("\n");
    sb.append("    localBankTransferTransaction: ").append(toIndentedString(localBankTransferTransaction)).append("\n");
    sb.append("    paypalTransaction: ").append(toIndentedString(paypalTransaction)).append("\n");
    sb.append("    acssDirectDebitTransaction: ").append(toIndentedString(acssDirectDebitTransaction)).append("\n");
    sb.append("    sepaDirectDebitTransaction: ").append(toIndentedString(sepaDirectDebitTransaction)).append("\n");
    sb.append("    sofortTransaction: ").append(toIndentedString(sofortTransaction)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ecpTransaction");
    openapiFields.add("amount");
    openapiFields.add("payerInfo");
    openapiFields.add("softDescriptor");
    openapiFields.add("currency");
    openapiFields.add("authorizedByShopper");
    openapiFields.add("becsDirectDebitTransaction");
    openapiFields.add("idealTransaction");
    openapiFields.add("localBankTransferTransaction");
    openapiFields.add("paypalTransaction");
    openapiFields.add("acssDirectDebitTransaction");
    openapiFields.add("sepaDirectDebitTransaction");
    openapiFields.add("sofortTransaction");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to TransactionCreateSofortTransactionRequest
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!TransactionCreateSofortTransactionRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TransactionCreateSofortTransactionRequest is not found in the empty JSON string", TransactionCreateSofortTransactionRequest.openapiRequiredFields.toString()));
        }
      }
      // validate the optional field `ecpTransaction`
      if (jsonObj.get("ecpTransaction") != null && !jsonObj.get("ecpTransaction").isJsonNull()) {
        TransactionCreateSofortTransactionRequestEcpTransaction.validateJsonObject(jsonObj.getAsJsonObject("ecpTransaction"));
      }
      // validate the optional field `payerInfo`
      if (jsonObj.get("payerInfo") != null && !jsonObj.get("payerInfo").isJsonNull()) {
        TransactionCreateSofortTransactionRequestPayerInfo.validateJsonObject(jsonObj.getAsJsonObject("payerInfo"));
      }
      if ((jsonObj.get("softDescriptor") != null && !jsonObj.get("softDescriptor").isJsonNull()) && !jsonObj.get("softDescriptor").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `softDescriptor` to be a primitive type in the JSON string but got `%s`", jsonObj.get("softDescriptor").toString()));
      }
      if ((jsonObj.get("currency") != null && !jsonObj.get("currency").isJsonNull()) && !jsonObj.get("currency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currency").toString()));
      }
      // validate the optional field `becsDirectDebitTransaction`
      if (jsonObj.get("becsDirectDebitTransaction") != null && !jsonObj.get("becsDirectDebitTransaction").isJsonNull()) {
        TransactionCreateSofortTransactionRequestBecsDirectDebitTransaction.validateJsonObject(jsonObj.getAsJsonObject("becsDirectDebitTransaction"));
      }
      // validate the optional field `idealTransaction`
      if (jsonObj.get("idealTransaction") != null && !jsonObj.get("idealTransaction").isJsonNull()) {
        TransactionCreateSofortTransactionRequestIdealTransaction.validateJsonObject(jsonObj.getAsJsonObject("idealTransaction"));
      }
      // validate the optional field `localBankTransferTransaction`
      if (jsonObj.get("localBankTransferTransaction") != null && !jsonObj.get("localBankTransferTransaction").isJsonNull()) {
        TransactionCreateSofortTransactionRequestLocalBankTransferTransaction.validateJsonObject(jsonObj.getAsJsonObject("localBankTransferTransaction"));
      }
      // validate the optional field `paypalTransaction`
      if (jsonObj.get("paypalTransaction") != null && !jsonObj.get("paypalTransaction").isJsonNull()) {
        TransactionCreateSofortTransactionRequestPaypalTransaction.validateJsonObject(jsonObj.getAsJsonObject("paypalTransaction"));
      }
      // validate the optional field `acssDirectDebitTransaction`
      if (jsonObj.get("acssDirectDebitTransaction") != null && !jsonObj.get("acssDirectDebitTransaction").isJsonNull()) {
        TransactionCreateSofortTransactionRequestAcssDirectDebitTransaction.validateJsonObject(jsonObj.getAsJsonObject("acssDirectDebitTransaction"));
      }
      // validate the optional field `sepaDirectDebitTransaction`
      if (jsonObj.get("sepaDirectDebitTransaction") != null && !jsonObj.get("sepaDirectDebitTransaction").isJsonNull()) {
        TransactionCreateSofortTransactionRequestSepaDirectDebitTransaction.validateJsonObject(jsonObj.getAsJsonObject("sepaDirectDebitTransaction"));
      }
      // validate the optional field `sofortTransaction`
      if (jsonObj.get("sofortTransaction") != null && !jsonObj.get("sofortTransaction").isJsonNull()) {
        TransactionCreateSofortTransactionRequestSofortTransaction.validateJsonObject(jsonObj.getAsJsonObject("sofortTransaction"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TransactionCreateSofortTransactionRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TransactionCreateSofortTransactionRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TransactionCreateSofortTransactionRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TransactionCreateSofortTransactionRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<TransactionCreateSofortTransactionRequest>() {
           @Override
           public void write(JsonWriter out, TransactionCreateSofortTransactionRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public TransactionCreateSofortTransactionRequest read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             TransactionCreateSofortTransactionRequest instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of TransactionCreateSofortTransactionRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of TransactionCreateSofortTransactionRequest
  * @throws IOException if the JSON string is invalid with respect to TransactionCreateSofortTransactionRequest
  */
  public static TransactionCreateSofortTransactionRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TransactionCreateSofortTransactionRequest.class);
  }

 /**
  * Convert an instance of TransactionCreateSofortTransactionRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

