/*
 * API Settings
 * At BlueSnap, we look at payments a little differently. Our Payment Orchestration Platform helps businesses accept payments globally and is designed to increase revenue and reduces costs. We provide a comprehensive back-end solutions that simplifies the complexity of payments, managing the full process from start to finish.  BlueSnap supports payments through multiple sales channels such as online and mobile sales, marketplaces, subscriptions, invoice payments and manual orders through a virtual terminal. And for businesses looking for embedded payments, we offer white-labeled payments for platforms with automated underwriting and onboarding that supports marketplaces and split payments.  And with one integration and contract, businesses can sell in over 200 geographies with access to local acquiring in 47 countries, 110+ currencies and 100+ global payment types, including popular eWallets, automated accounts receivable, world-class fraud protection and chargeback management, built-in solutions for regulation and tax compliance, and unified global reporting to help businesses grow.  With a US headquarters in Waltham, MA, and EU headquarters in Dublin, Ireland, BlueSnap is backed by world-class private equity investors including Great Hill Partners and Parthenon Capital Partners.   Learn more at BlueSnap.com
 *
 * The version of the OpenAPI document: 8976-Tools
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.TransactionCreateBatchTransactionRequestBatchTransactionCardTransactionInnerCardHolderInfo;
import com.konfigthis.client.model.TransactionCreateBatchTransactionRequestBatchTransactionCardTransactionInnerCreditCard;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * TransactionCreateBatchTransactionRequestBatchTransactionCardTransactionInner
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class TransactionCreateBatchTransactionRequestBatchTransactionCardTransactionInner {
  public static final String SERIALIZED_NAME_CARD_TRANSACTION_TYPE = "cardTransactionType";
  @SerializedName(SERIALIZED_NAME_CARD_TRANSACTION_TYPE)
  private String cardTransactionType = "AUTH_CAPTURE";

  public static final String SERIALIZED_NAME_MERCHANT_TRANSACTION_ID = "merchantTransactionId";
  @SerializedName(SERIALIZED_NAME_MERCHANT_TRANSACTION_ID)
  private String merchantTransactionId = "566";

  public static final String SERIALIZED_NAME_AMOUNT = "amount";
  @SerializedName(SERIALIZED_NAME_AMOUNT)
  private String amount = "20.00";

  public static final String SERIALIZED_NAME_CURRENCY = "currency";
  @SerializedName(SERIALIZED_NAME_CURRENCY)
  private String currency = "USD";

  public static final String SERIALIZED_NAME_CARD_HOLDER_INFO = "cardHolderInfo";
  @SerializedName(SERIALIZED_NAME_CARD_HOLDER_INFO)
  private TransactionCreateBatchTransactionRequestBatchTransactionCardTransactionInnerCardHolderInfo cardHolderInfo;

  public static final String SERIALIZED_NAME_CREDIT_CARD = "creditCard";
  @SerializedName(SERIALIZED_NAME_CREDIT_CARD)
  private TransactionCreateBatchTransactionRequestBatchTransactionCardTransactionInnerCreditCard creditCard;

  public TransactionCreateBatchTransactionRequestBatchTransactionCardTransactionInner() {
  }

  public TransactionCreateBatchTransactionRequestBatchTransactionCardTransactionInner cardTransactionType(String cardTransactionType) {
    
    
    
    
    this.cardTransactionType = cardTransactionType;
    return this;
  }

   /**
   * Get cardTransactionType
   * @return cardTransactionType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "AUTH_CAPTURE", value = "")

  public String getCardTransactionType() {
    return cardTransactionType;
  }


  public void setCardTransactionType(String cardTransactionType) {
    
    
    
    this.cardTransactionType = cardTransactionType;
  }


  public TransactionCreateBatchTransactionRequestBatchTransactionCardTransactionInner merchantTransactionId(String merchantTransactionId) {
    
    
    
    
    this.merchantTransactionId = merchantTransactionId;
    return this;
  }

   /**
   * Get merchantTransactionId
   * @return merchantTransactionId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "566", value = "")

  public String getMerchantTransactionId() {
    return merchantTransactionId;
  }


  public void setMerchantTransactionId(String merchantTransactionId) {
    
    
    
    this.merchantTransactionId = merchantTransactionId;
  }


  public TransactionCreateBatchTransactionRequestBatchTransactionCardTransactionInner amount(String amount) {
    
    
    
    
    this.amount = amount;
    return this;
  }

   /**
   * Get amount
   * @return amount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "20.00", value = "")

  public String getAmount() {
    return amount;
  }


  public void setAmount(String amount) {
    
    
    
    this.amount = amount;
  }


  public TransactionCreateBatchTransactionRequestBatchTransactionCardTransactionInner currency(String currency) {
    
    
    
    
    this.currency = currency;
    return this;
  }

   /**
   * Get currency
   * @return currency
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "USD", value = "")

  public String getCurrency() {
    return currency;
  }


  public void setCurrency(String currency) {
    
    
    
    this.currency = currency;
  }


  public TransactionCreateBatchTransactionRequestBatchTransactionCardTransactionInner cardHolderInfo(TransactionCreateBatchTransactionRequestBatchTransactionCardTransactionInnerCardHolderInfo cardHolderInfo) {
    
    
    
    
    this.cardHolderInfo = cardHolderInfo;
    return this;
  }

   /**
   * Get cardHolderInfo
   * @return cardHolderInfo
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public TransactionCreateBatchTransactionRequestBatchTransactionCardTransactionInnerCardHolderInfo getCardHolderInfo() {
    return cardHolderInfo;
  }


  public void setCardHolderInfo(TransactionCreateBatchTransactionRequestBatchTransactionCardTransactionInnerCardHolderInfo cardHolderInfo) {
    
    
    
    this.cardHolderInfo = cardHolderInfo;
  }


  public TransactionCreateBatchTransactionRequestBatchTransactionCardTransactionInner creditCard(TransactionCreateBatchTransactionRequestBatchTransactionCardTransactionInnerCreditCard creditCard) {
    
    
    
    
    this.creditCard = creditCard;
    return this;
  }

   /**
   * Get creditCard
   * @return creditCard
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public TransactionCreateBatchTransactionRequestBatchTransactionCardTransactionInnerCreditCard getCreditCard() {
    return creditCard;
  }


  public void setCreditCard(TransactionCreateBatchTransactionRequestBatchTransactionCardTransactionInnerCreditCard creditCard) {
    
    
    
    this.creditCard = creditCard;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the TransactionCreateBatchTransactionRequestBatchTransactionCardTransactionInner instance itself
   */
  public TransactionCreateBatchTransactionRequestBatchTransactionCardTransactionInner putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TransactionCreateBatchTransactionRequestBatchTransactionCardTransactionInner transactionCreateBatchTransactionRequestBatchTransactionCardTransactionInner = (TransactionCreateBatchTransactionRequestBatchTransactionCardTransactionInner) o;
    return Objects.equals(this.cardTransactionType, transactionCreateBatchTransactionRequestBatchTransactionCardTransactionInner.cardTransactionType) &&
        Objects.equals(this.merchantTransactionId, transactionCreateBatchTransactionRequestBatchTransactionCardTransactionInner.merchantTransactionId) &&
        Objects.equals(this.amount, transactionCreateBatchTransactionRequestBatchTransactionCardTransactionInner.amount) &&
        Objects.equals(this.currency, transactionCreateBatchTransactionRequestBatchTransactionCardTransactionInner.currency) &&
        Objects.equals(this.cardHolderInfo, transactionCreateBatchTransactionRequestBatchTransactionCardTransactionInner.cardHolderInfo) &&
        Objects.equals(this.creditCard, transactionCreateBatchTransactionRequestBatchTransactionCardTransactionInner.creditCard)&&
        Objects.equals(this.additionalProperties, transactionCreateBatchTransactionRequestBatchTransactionCardTransactionInner.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cardTransactionType, merchantTransactionId, amount, currency, cardHolderInfo, creditCard, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TransactionCreateBatchTransactionRequestBatchTransactionCardTransactionInner {\n");
    sb.append("    cardTransactionType: ").append(toIndentedString(cardTransactionType)).append("\n");
    sb.append("    merchantTransactionId: ").append(toIndentedString(merchantTransactionId)).append("\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    cardHolderInfo: ").append(toIndentedString(cardHolderInfo)).append("\n");
    sb.append("    creditCard: ").append(toIndentedString(creditCard)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cardTransactionType");
    openapiFields.add("merchantTransactionId");
    openapiFields.add("amount");
    openapiFields.add("currency");
    openapiFields.add("cardHolderInfo");
    openapiFields.add("creditCard");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to TransactionCreateBatchTransactionRequestBatchTransactionCardTransactionInner
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!TransactionCreateBatchTransactionRequestBatchTransactionCardTransactionInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TransactionCreateBatchTransactionRequestBatchTransactionCardTransactionInner is not found in the empty JSON string", TransactionCreateBatchTransactionRequestBatchTransactionCardTransactionInner.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("cardTransactionType") != null && !jsonObj.get("cardTransactionType").isJsonNull()) && !jsonObj.get("cardTransactionType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cardTransactionType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cardTransactionType").toString()));
      }
      if ((jsonObj.get("merchantTransactionId") != null && !jsonObj.get("merchantTransactionId").isJsonNull()) && !jsonObj.get("merchantTransactionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `merchantTransactionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("merchantTransactionId").toString()));
      }
      if ((jsonObj.get("amount") != null && !jsonObj.get("amount").isJsonNull()) && !jsonObj.get("amount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `amount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("amount").toString()));
      }
      if ((jsonObj.get("currency") != null && !jsonObj.get("currency").isJsonNull()) && !jsonObj.get("currency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currency").toString()));
      }
      // validate the optional field `cardHolderInfo`
      if (jsonObj.get("cardHolderInfo") != null && !jsonObj.get("cardHolderInfo").isJsonNull()) {
        TransactionCreateBatchTransactionRequestBatchTransactionCardTransactionInnerCardHolderInfo.validateJsonObject(jsonObj.getAsJsonObject("cardHolderInfo"));
      }
      // validate the optional field `creditCard`
      if (jsonObj.get("creditCard") != null && !jsonObj.get("creditCard").isJsonNull()) {
        TransactionCreateBatchTransactionRequestBatchTransactionCardTransactionInnerCreditCard.validateJsonObject(jsonObj.getAsJsonObject("creditCard"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TransactionCreateBatchTransactionRequestBatchTransactionCardTransactionInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TransactionCreateBatchTransactionRequestBatchTransactionCardTransactionInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TransactionCreateBatchTransactionRequestBatchTransactionCardTransactionInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TransactionCreateBatchTransactionRequestBatchTransactionCardTransactionInner.class));

       return (TypeAdapter<T>) new TypeAdapter<TransactionCreateBatchTransactionRequestBatchTransactionCardTransactionInner>() {
           @Override
           public void write(JsonWriter out, TransactionCreateBatchTransactionRequestBatchTransactionCardTransactionInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public TransactionCreateBatchTransactionRequestBatchTransactionCardTransactionInner read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             TransactionCreateBatchTransactionRequestBatchTransactionCardTransactionInner instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of TransactionCreateBatchTransactionRequestBatchTransactionCardTransactionInner given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of TransactionCreateBatchTransactionRequestBatchTransactionCardTransactionInner
  * @throws IOException if the JSON string is invalid with respect to TransactionCreateBatchTransactionRequestBatchTransactionCardTransactionInner
  */
  public static TransactionCreateBatchTransactionRequestBatchTransactionCardTransactionInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TransactionCreateBatchTransactionRequestBatchTransactionCardTransactionInner.class);
  }

 /**
  * Convert an instance of TransactionCreateBatchTransactionRequestBatchTransactionCardTransactionInner to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

