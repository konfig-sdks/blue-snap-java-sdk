/*
 * API Settings
 * At BlueSnap, we look at payments a little differently. Our Payment Orchestration Platform helps businesses accept payments globally and is designed to increase revenue and reduces costs. We provide a comprehensive back-end solutions that simplifies the complexity of payments, managing the full process from start to finish.  BlueSnap supports payments through multiple sales channels such as online and mobile sales, marketplaces, subscriptions, invoice payments and manual orders through a virtual terminal. And for businesses looking for embedded payments, we offer white-labeled payments for platforms with automated underwriting and onboarding that supports marketplaces and split payments.  And with one integration and contract, businesses can sell in over 200 geographies with access to local acquiring in 47 countries, 110+ currencies and 100+ global payment types, including popular eWallets, automated accounts receivable, world-class fraud protection and chargeback management, built-in solutions for regulation and tax compliance, and unified global reporting to help businesses grow.  With a US headquarters in Waltham, MA, and EU headquarters in Dublin, Ireland, BlueSnap is backed by world-class private equity investors including Great Hill Partners and Parthenon Capital Partners.   Learn more at BlueSnap.com
 *
 * The version of the OpenAPI document: 8976-Tools
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.VendorCreateRequest;
import com.konfigthis.client.model.VendorCreateRequestVendorAgreement;
import com.konfigthis.client.model.VendorCreateRequestVendorPrincipal;
import com.konfigthis.client.model.VendorUpdateVendorRequest;
import com.konfigthis.client.model.VendorUpdateVendorRequestPayoutInfoInner;
import com.konfigthis.client.model.VendorUpdateVendorRequestVendorAgreement;
import com.konfigthis.client.model.VendorUpdateVendorRequestVendorPrincipal;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for VendorApi
 */
@Disabled
public class VendorApiTest {

    private static VendorApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new VendorApi(apiClient);
    }

    /**
     * Create Vendor
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createTest() throws ApiException {
        String email = null;
        String firstName = null;
        String lastName = null;
        String phone = null;
        String address = null;
        String city = null;
        String country = null;
        String state = null;
        String zip = null;
        String defaultPayoutCurrency = null;
        String ipnUrl = null;
        VendorCreateRequestVendorPrincipal vendorPrincipal = null;
        VendorCreateRequestVendorAgreement vendorAgreement = null;
        Object payoutInfo = null;
        api.create()
                .email(email)
                .firstName(firstName)
                .lastName(lastName)
                .phone(phone)
                .address(address)
                .city(city)
                .country(country)
                .state(state)
                .zip(zip)
                .defaultPayoutCurrency(defaultPayoutCurrency)
                .ipnUrl(ipnUrl)
                .vendorPrincipal(vendorPrincipal)
                .vendorAgreement(vendorAgreement)
                .payoutInfo(payoutInfo)
                .execute();
        // TODO: test validations
    }

    /**
     * Retrieve All Vendors
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAllVendorsTest() throws ApiException {
        Boolean gettotal = null;
        api.getAllVendors()
                .gettotal(gettotal)
                .execute();
        // TODO: test validations
    }

    /**
     * Retrieve Vendor
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getVendorTest() throws ApiException {
        Integer vendorId = null;
        api.getVendor(vendorId)
                .execute();
        // TODO: test validations
    }

    /**
     * Update Vendor
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateVendorTest() throws ApiException {
        Integer vendorId = null;
        String email = null;
        String name = null;
        String firstName = null;
        String lastName = null;
        String address = null;
        String city = null;
        String zip = null;
        String country = null;
        String phone = null;
        String state = null;
        Integer taxId = null;
        String vendorUrl = null;
        String ipnUrl = null;
        String defaultPayoutCurrency = null;
        VendorUpdateVendorRequestVendorPrincipal vendorPrincipal = null;
        List<VendorUpdateVendorRequestPayoutInfoInner> payoutInfo = null;
        VendorUpdateVendorRequestVendorAgreement vendorAgreement = null;
        api.updateVendor(vendorId)
                .email(email)
                .name(name)
                .firstName(firstName)
                .lastName(lastName)
                .address(address)
                .city(city)
                .zip(zip)
                .country(country)
                .phone(phone)
                .state(state)
                .taxId(taxId)
                .vendorUrl(vendorUrl)
                .ipnUrl(ipnUrl)
                .defaultPayoutCurrency(defaultPayoutCurrency)
                .vendorPrincipal(vendorPrincipal)
                .payoutInfo(payoutInfo)
                .vendorAgreement(vendorAgreement)
                .execute();
        // TODO: test validations
    }

}
