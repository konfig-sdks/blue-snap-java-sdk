/*
 * API Settings
 * At BlueSnap, we look at payments a little differently. Our Payment Orchestration Platform helps businesses accept payments globally and is designed to increase revenue and reduces costs. We provide a comprehensive back-end solutions that simplifies the complexity of payments, managing the full process from start to finish.  BlueSnap supports payments through multiple sales channels such as online and mobile sales, marketplaces, subscriptions, invoice payments and manual orders through a virtual terminal. And for businesses looking for embedded payments, we offer white-labeled payments for platforms with automated underwriting and onboarding that supports marketplaces and split payments.  And with one integration and contract, businesses can sell in over 200 geographies with access to local acquiring in 47 countries, 110+ currencies and 100+ global payment types, including popular eWallets, automated accounts receivable, world-class fraud protection and chargeback management, built-in solutions for regulation and tax compliance, and unified global reporting to help businesses grow.  With a US headquarters in Waltham, MA, and EU headquarters in Dublin, Ireland, BlueSnap is backed by world-class private equity investors including Great Hill Partners and Parthenon Capital Partners.   Learn more at BlueSnap.com
 *
 * The version of the OpenAPI document: 8976-Tools
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.SubscriptionCreateMerchantManagedChargeRequest;
import com.konfigthis.client.model.SubscriptionCreateMerchantManagedSubscriptionRequest;
import com.konfigthis.client.model.SubscriptionCreateMerchantManagedSubscriptionRequestPayerInfo;
import com.konfigthis.client.model.SubscriptionCreateMerchantManagedSubscriptionRequestPaymentSource;
import com.konfigthis.client.model.SubscriptionCreateNewRequest;
import com.konfigthis.client.model.SubscriptionCreateNewRequestPayerInfo;
import com.konfigthis.client.model.SubscriptionCreateNewRequestPaymentSource;
import com.konfigthis.client.model.SubscriptionUpdateSubscriptionRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for SubscriptionApi
 */
@Disabled
public class SubscriptionApiTest {

    private static SubscriptionApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new SubscriptionApi(apiClient);
    }

    /**
     * Create Merchant-Managed Subscription Charge
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createMerchantManagedChargeTest() throws ApiException {
        Integer subscriptionId = null;
        Float amount = null;
        String currency = null;
        String merchantTransactionId = null;
        String taxReference = null;
        api.createMerchantManagedCharge(subscriptionId)
                .amount(amount)
                .currency(currency)
                .merchantTransactionId(merchantTransactionId)
                .taxReference(taxReference)
                .execute();
        // TODO: test validations
    }

    /**
     * Create Merchant-Managed Subscription
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createMerchantManagedSubscriptionTest() throws ApiException {
        Float amount = null;
        String currency = null;
        SubscriptionCreateMerchantManagedSubscriptionRequestPayerInfo payerInfo = null;
        SubscriptionCreateMerchantManagedSubscriptionRequestPaymentSource paymentSource = null;
        api.createMerchantManagedSubscription()
                .amount(amount)
                .currency(currency)
                .payerInfo(payerInfo)
                .paymentSource(paymentSource)
                .execute();
        // TODO: test validations
    }

    /**
     * Create Subscription
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createNewTest() throws ApiException {
        SubscriptionCreateNewRequestPayerInfo payerInfo = null;
        SubscriptionCreateNewRequestPaymentSource paymentSource = null;
        Integer planId = null;
        api.createNew()
                .payerInfo(payerInfo)
                .paymentSource(paymentSource)
                .planId(planId)
                .execute();
        // TODO: test validations
    }

    /**
     * Retrieve Specific Subscription
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSpecificTest() throws ApiException {
        Integer subscriptionId = null;
        api.getSpecific(subscriptionId)
                .execute();
        // TODO: test validations
    }

    /**
     * Retrieve Subscription Switch Charge Amount
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSwitchChargeAmountTest() throws ApiException {
        String newplanid = null;
        String newquantity = null;
        api.getSwitchChargeAmount()
                .newplanid(newplanid)
                .newquantity(newquantity)
                .execute();
        // TODO: test validations
    }

    /**
     * Retrieve All Subscriptions
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listAllSubscriptionsTest() throws ApiException {
        String pagesize = null;
        String after = null;
        Boolean gettotal = null;
        Boolean fulldescription = null;
        api.listAllSubscriptions()
                .pagesize(pagesize)
                .after(after)
                .gettotal(gettotal)
                .fulldescription(fulldescription)
                .execute();
        // TODO: test validations
    }

    /**
     * Retrieve All Charges for a Subscription
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listChargesTest() throws ApiException {
        String pagesize = null;
        String after = null;
        Boolean fulldescription = null;
        api.listCharges()
                .pagesize(pagesize)
                .after(after)
                .fulldescription(fulldescription)
                .execute();
        // TODO: test validations
    }

    /**
     * Update Subscription
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateSubscriptionTest() throws ApiException {
        Integer subscriptionId = null;
        String planId = null;
        api.updateSubscription(subscriptionId)
                .planId(planId)
                .execute();
        // TODO: test validations
    }

}
