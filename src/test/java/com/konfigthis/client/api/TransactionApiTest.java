/*
 * API Settings
 * At BlueSnap, we look at payments a little differently. Our Payment Orchestration Platform helps businesses accept payments globally and is designed to increase revenue and reduces costs. We provide a comprehensive back-end solutions that simplifies the complexity of payments, managing the full process from start to finish.  BlueSnap supports payments through multiple sales channels such as online and mobile sales, marketplaces, subscriptions, invoice payments and manual orders through a virtual terminal. And for businesses looking for embedded payments, we offer white-labeled payments for platforms with automated underwriting and onboarding that supports marketplaces and split payments.  And with one integration and contract, businesses can sell in over 200 geographies with access to local acquiring in 47 countries, 110+ currencies and 100+ global payment types, including popular eWallets, automated accounts receivable, world-class fraud protection and chargeback management, built-in solutions for regulation and tax compliance, and unified global reporting to help businesses grow.  With a US headquarters in Waltham, MA, and EU headquarters in Dublin, Ireland, BlueSnap is backed by world-class private equity investors including Great Hill Partners and Parthenon Capital Partners.   Learn more at BlueSnap.com
 *
 * The version of the OpenAPI document: 8976-Tools
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.TransactionCreateBatchTransactionRequest;
import com.konfigthis.client.model.TransactionCreateBatchTransactionRequestBatchTransaction;
import com.konfigthis.client.model.TransactionCreateSofortTransactionRequest;
import com.konfigthis.client.model.TransactionCreateSofortTransactionRequestAcssDirectDebitTransaction;
import com.konfigthis.client.model.TransactionCreateSofortTransactionRequestBecsDirectDebitTransaction;
import com.konfigthis.client.model.TransactionCreateSofortTransactionRequestEcpTransaction;
import com.konfigthis.client.model.TransactionCreateSofortTransactionRequestIdealTransaction;
import com.konfigthis.client.model.TransactionCreateSofortTransactionRequestLocalBankTransferTransaction;
import com.konfigthis.client.model.TransactionCreateSofortTransactionRequestPayerInfo;
import com.konfigthis.client.model.TransactionCreateSofortTransactionRequestPaypalTransaction;
import com.konfigthis.client.model.TransactionCreateSofortTransactionRequestSepaDirectDebitTransaction;
import com.konfigthis.client.model.TransactionCreateSofortTransactionRequestSofortTransaction;
import com.konfigthis.client.model.TransactionInitiateRefundRequest;
import com.konfigthis.client.model.TransactionInitiateRefundRequestTransactionMetaData;
import com.konfigthis.client.model.TransactionUpdatePaypalTransactionRequest;
import com.konfigthis.client.model.TransactionUpdatePaypalTransactionRequestPaypalTransaction;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for TransactionApi
 */
@Disabled
public class TransactionApiTest {

    private static TransactionApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new TransactionApi(apiClient);
    }

    /**
     * Merchant Approve Transaction
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void approveMerchantTransactionTest() throws ApiException {
        String transactionid = null;
        Boolean approvetransaction = null;
        api.approveMerchantTransaction()
                .transactionid(transactionid)
                .approvetransaction(approvetransaction)
                .execute();
        // TODO: test validations
    }

    /**
     * Cancel Pending Refund
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cancelPendingRefundTest() throws ApiException {
        String transactionId = null;
        api.cancelPendingRefund(transactionId)
                .execute();
        // TODO: test validations
    }

    /**
     * Create Batch Transaction
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createBatchTransactionTest() throws ApiException {
        TransactionCreateBatchTransactionRequestBatchTransaction batchTransaction = null;
        api.createBatchTransaction()
                .batchTransaction(batchTransaction)
                .execute();
        // TODO: test validations
    }

    /**
     * Create Sofort Transaction
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createSofortTransactionTest() throws ApiException {
        TransactionCreateSofortTransactionRequestEcpTransaction ecpTransaction = null;
        Float amount = null;
        TransactionCreateSofortTransactionRequestPayerInfo payerInfo = null;
        String softDescriptor = null;
        String currency = null;
        Boolean authorizedByShopper = null;
        TransactionCreateSofortTransactionRequestBecsDirectDebitTransaction becsDirectDebitTransaction = null;
        TransactionCreateSofortTransactionRequestIdealTransaction idealTransaction = null;
        TransactionCreateSofortTransactionRequestLocalBankTransferTransaction localBankTransferTransaction = null;
        TransactionCreateSofortTransactionRequestPaypalTransaction paypalTransaction = null;
        TransactionCreateSofortTransactionRequestAcssDirectDebitTransaction acssDirectDebitTransaction = null;
        TransactionCreateSofortTransactionRequestSepaDirectDebitTransaction sepaDirectDebitTransaction = null;
        TransactionCreateSofortTransactionRequestSofortTransaction sofortTransaction = null;
        api.createSofortTransaction()
                .ecpTransaction(ecpTransaction)
                .amount(amount)
                .payerInfo(payerInfo)
                .softDescriptor(softDescriptor)
                .currency(currency)
                .authorizedByShopper(authorizedByShopper)
                .becsDirectDebitTransaction(becsDirectDebitTransaction)
                .idealTransaction(idealTransaction)
                .localBankTransferTransaction(localBankTransferTransaction)
                .paypalTransaction(paypalTransaction)
                .acssDirectDebitTransaction(acssDirectDebitTransaction)
                .sepaDirectDebitTransaction(sepaDirectDebitTransaction)
                .sofortTransaction(sofortTransaction)
                .execute();
        // TODO: test validations
    }

    /**
     * Retrieve Batch Transaction
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getBatchTransactionTest() throws ApiException {
        String batchId = null;
        api.getBatchTransaction(batchId)
                .execute();
        // TODO: test validations
    }

    /**
     * Retrieve
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getByIdTest() throws ApiException {
        String transactionId = null;
        api.getById(transactionId)
                .execute();
        // TODO: test validations
    }

    /**
     * Retrieve PayPal Transaction
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPaypalTransactionTest() throws ApiException {
        String orderId = null;
        api.getPaypalTransaction(orderId)
                .execute();
        // TODO: test validations
    }

    /**
     * Get Pre-Notification Debit Agreement
     *
     * for Australia and Canada
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPreNotificationDebitAgreementTest() throws ApiException {
        String transactionId = null;
        api.getPreNotificationDebitAgreement()
                .transactionId(transactionId)
                .execute();
        // TODO: test validations
    }

    /**
     * Retrieve SEPA DD Transaction
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSepaDdTest() throws ApiException {
        String transactionId = null;
        api.getSepaDd(transactionId)
                .execute();
        // TODO: test validations
    }

    /**
     * Retrieve Sofort Transaction
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSofortTransactionTest() throws ApiException {
        Integer orderId = null;
        api.getSofortTransaction(orderId)
                .execute();
        // TODO: test validations
    }

    /**
     * Refund
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void initiateRefundTest() throws ApiException {
        String transactionId = null;
        String reason = null;
        Boolean cancelSubscriptions = null;
        TransactionInitiateRefundRequestTransactionMetaData transactionMetaData = null;
        api.initiateRefund(transactionId)
                .reason(reason)
                .cancelSubscriptions(cancelSubscriptions)
                .transactionMetaData(transactionMetaData)
                .execute();
        // TODO: test validations
    }

    /**
     * Update PayPal Transaction
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updatePaypalTransactionTest() throws ApiException {
        Float amount = null;
        String currency = null;
        TransactionUpdatePaypalTransactionRequestPaypalTransaction paypalTransaction = null;
        api.updatePaypalTransaction()
                .amount(amount)
                .currency(currency)
                .paypalTransaction(paypalTransaction)
                .execute();
        // TODO: test validations
    }

}
